
    /**
     * Hook Registry
     * This file is auto-generated. Do not edit manually.
     */
    export const registry = {
  "use-boolean": {
    "component": () => import('../registry/examples/hooks-example/UseBooleanExample').then(mod => mod.UseBooleanExample),
    "source": "'use client'\nimport { useBoolean } from '@/registry/hooks/use-boolean'\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport { Badge } from '@/components/ui/badge'\nimport {\n  CheckCircle2,\n  XCircle,\n  RotateCcw,\n  RefreshCw,\n  ToggleLeft,\n} from 'lucide-react'\n\nexport const UseBooleanExample = () => {\n  const [value, { setValue, toggle, setTrue, setFalse, reset, getValue }] =\n    useBoolean(false)\n\n  return (\n    <Card className=\"mx-auto border shadow-sm transition-all duration-200\">\n      <CardHeader className=\"pb-2\">\n        <CardTitle className=\"text-center flex flex-col items-center gap-3\">\n          <h6 className=\"text-sm uppercase tracking-wide text-muted-foreground font-medium\">\n            Current value\n          </h6>\n          <div key={value.toString()}>\n            <Badge\n              variant={value ? 'default' : 'destructive'}\n              className=\"px-4 py-1 text-sm font-medium\"\n            >\n              {value ? 'true' : 'false'}\n            </Badge>\n          </div>\n        </CardTitle>\n      </CardHeader>\n      <CardContent className=\"pt-6\">\n        <div className=\"grid grid-cols-2 gap-3 sm:grid-cols-3\">\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={setTrue}\n            className=\"h-9 font-medium transition-colors hover:bg-primary/10 hover:text-primary hover:border-primary/20 flex items-center justify-center gap-2\"\n          >\n            <CheckCircle2 className=\"h-4 w-4\" /> Set True\n          </Button>\n\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={setFalse}\n            className=\"h-9 font-medium transition-colors hover:bg-destructive/10 hover:text-destructive hover:border-destructive/20 flex items-center justify-center gap-2\"\n          >\n            <XCircle className=\"h-4 w-4\" /> Set False\n          </Button>\n\n          <Button\n            variant=\"secondary\"\n            size=\"sm\"\n            onClick={toggle}\n            className=\"h-9 font-medium transition-colors flex items-center justify-center gap-2\"\n          >\n            <ToggleLeft className=\"h-4 w-4\" /> Toggle\n          </Button>\n\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={reset}\n            className=\"h-9 font-medium transition-colors flex items-center justify-center gap-2\"\n          >\n            <RotateCcw className=\"h-4 w-4\" /> Reset\n          </Button>\n\n          <Button\n            variant=\"default\"\n            size=\"sm\"\n            onClick={() => setValue(!getValue())}\n            className=\"h-9 font-medium transition-colors col-span-1 sm:col-span-2 flex items-center justify-center gap-2\"\n            title=\"Same as toggle but using setValue and getValue methods\"\n          >\n            <RefreshCw className=\"h-4 w-4\" /> Set Opposite (Alternative)\n          </Button>\n        </div>\n        <div className=\"mt-3 text-xs text-muted-foreground\">\n          Note: \"Toggle\" and \"Set Opposite\" perform the same action but use\n          different hook methods.\n        </div>\n      </CardContent>\n    </Card>\n  )\n}\n",
    "dependencies": []
  },
  "use-default": {
    "component": () => import('../registry/examples/hooks-example/UseDefaultExample').then(mod => mod.UseDefaultExample),
    "source": "'use client'\nimport { useState } from 'react'\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport { Badge } from '@/components/ui/badge'\nimport { useDefault } from '@/registry/hooks/use-default'\nimport {\n  RotateCcw,\n  CircleOff,\n  CircleSlash,\n  Plus,\n  Minus,\n  RefreshCw,\n} from 'lucide-react'\n\nexport const UseDefaultExample = () => {\n  const initialValue = 10\n  const defaultValue = 0\n  const [value, setValue] = useDefault(initialValue, defaultValue)\n  const [customValue, setCustomValue] = useState(5)\n\n  return (\n    <Card className=\"mx-auto border shadow-sm transition-all duration-200 max-w-sm\">\n      <CardHeader className=\"pb-2\">\n        <CardTitle className=\"text-center flex flex-col justify-center items-center gap-3\">\n          <h6 className=\"text-sm uppercase tracking-wide text-muted-foreground font-medium\">\n            Current value\n          </h6>\n          <div className=\"flex items-center gap-2\">\n            <Button\n              size=\"sm\"\n              variant=\"outline\"\n              onClick={() => setValue(value - 1)}\n              className=\"h-8 w-8 p-0\"\n            >\n              <Minus className=\"h-4 w-4\" />\n            </Button>\n\n            <Badge\n              variant={\n                value > 0 ? 'default' : value < 0 ? 'destructive' : 'secondary'\n              }\n              className=\"px-4 py-1 text-sm font-medium\"\n            >\n              {value}\n            </Badge>\n\n            <Button\n              size=\"sm\"\n              variant=\"outline\"\n              onClick={() => setValue(value + 1)}\n              className=\"h-8 w-8 p-0\"\n            >\n              <Plus className=\"h-4 w-4\" />\n            </Button>\n          </div>\n        </CardTitle>\n      </CardHeader>\n      <CardContent className=\"pt-6\">\n        <div className=\"grid grid-cols-2 gap-3 sm:grid-cols-3\">\n          <Button\n            variant=\"secondary\"\n            size=\"sm\"\n            onClick={() => setValue(null)}\n            className=\"h-9 font-medium transition-colors flex items-center justify-center gap-2\"\n          >\n            <CircleOff className=\"h-4 w-4\" /> Set Null\n          </Button>\n\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={() => setValue(undefined)}\n            className=\"h-9 font-medium transition-colors flex items-center justify-center gap-2\"\n          >\n            <CircleSlash className=\"h-4 w-4\" /> Set Undefined\n          </Button>\n\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => setValue(initialValue)}\n            className=\"h-9 font-medium transition-colors flex items-center justify-center gap-2\"\n          >\n            <RotateCcw className=\"h-4 w-4\" /> Reset\n          </Button>\n\n          <Button\n            variant=\"default\"\n            size=\"sm\"\n            onClick={() => setValue(customValue)}\n            className=\"h-9 font-medium transition-colors col-span-1 sm:col-span-3 flex items-center justify-center gap-2\"\n          >\n            <RefreshCw className=\"h-4 w-4\" /> Set Custom Value ({customValue})\n          </Button>\n        </div>\n        <div className=\"mt-3 text-xs text-muted-foreground\">\n          <p>\n            Initial: {initialValue} | Default: {defaultValue} | Custom:{' '}\n            {customValue}\n          </p>\n          <p className=\"mt-1\">\n            Note: When setting to null or undefined, the hook automatically\n            falls back to the default value ({defaultValue}).\n          </p>\n        </div>\n      </CardContent>\n    </Card>\n  )\n}\n",
    "dependencies": []
  },
  "use-clipboard-copy": {
    "component": () => import('../registry/examples/hooks-example/UseClipboardCopyExample').then(mod => mod.UseClipboardCopyExample),
    "source": "'use client'\n\nimport { useState } from 'react'\nimport { useClipboardCopy } from '../../hooks/use-clipboard-copy'\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport { Badge } from '@/components/ui/badge'\nimport { Input } from '@/components/ui/input'\nimport { Clipboard, CheckCircle2, RefreshCw, ClipboardX } from 'lucide-react'\nimport { useToast } from '@/hooks/use-toast'\n\nexport const UseClipboardCopyExample = () => {\n  const [inputText, setInputText] = useState('Copy this text to clipboard!')\n  const { toast } = useToast()\n  const [copiedText, copy, copyStatus] = useClipboardCopy()\n\n  const handleCopy = async () => {\n    const success = await copy(inputText)\n\n    if (success) {\n      toast({\n        title: 'Text copied!',\n        description:\n          copiedText && copiedText?.length > 50\n            ? `${copiedText?.substring(0, 50)}...`\n            : copiedText,\n        variant: 'default',\n        duration: 1000,\n      })\n    } else {\n      toast({\n        title: 'Copy failed',\n        description: 'Could not copy text to clipboard',\n        variant: 'destructive',\n      })\n    }\n  }\n\n  const handleReset = () => {\n    setInputText('Copy this text to clipboard!')\n  }\n\n  return (\n    <Card className=\"mx-auto border shadow-sm transition-all duration-200\">\n      <CardHeader className=\"pb-2\">\n        <CardTitle className=\"text-center flex flex-col items-center gap-3\">\n          <h6 className=\"text-sm uppercase tracking-wide text-muted-foreground font-medium\">\n            Clipboard Copy Demo\n          </h6>\n          <div>\n            <Badge\n              variant={\n                copyStatus === 'success'\n                  ? 'default'\n                  : copyStatus === 'error'\n                    ? 'destructive'\n                    : 'secondary'\n              }\n              className=\"px-4 py-1 text-sm font-medium\"\n            >\n              {copyStatus === 'success'\n                ? 'Copied!'\n                : copyStatus === 'error'\n                  ? 'Failed!'\n                  : 'Ready'}\n            </Badge>\n          </div>\n        </CardTitle>\n      </CardHeader>\n      <CardContent className=\"pt-6\">\n        <div className=\"space-y-4\">\n          <div className=\"space-y-2\">\n            <label htmlFor=\"text-to-copy\" className=\"text-sm font-medium\">\n              Text to copy:\n            </label>\n            <Input\n              id=\"text-to-copy\"\n              value={inputText}\n              onChange={(e) => setInputText(e.target.value)}\n              placeholder=\"Enter text to copy...\"\n              className=\"w-full\"\n            />\n          </div>\n\n          <div className=\"grid grid-cols-2 gap-3\">\n            <Button\n              variant=\"default\"\n              onClick={handleCopy}\n              className=\"h-9 font-medium transition-colors flex items-center justify-center gap-2\"\n            >\n              {copyStatus === 'success' ? (\n                <CheckCircle2 className=\"h-4 w-4\" />\n              ) : copyStatus === 'error' ? (\n                <ClipboardX className=\"h-4 w-4\" />\n              ) : (\n                <Clipboard className=\"h-4 w-4\" />\n              )}\n              Copy to Clipboard\n            </Button>\n\n            <Button\n              variant=\"ghost\"\n              onClick={handleReset}\n              className=\"h-9 font-medium transition-colors flex items-center justify-center gap-2\"\n            >\n              <RefreshCw className=\"h-4 w-4\" /> Reset\n            </Button>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  )\n}\n",
    "dependencies": []
  },
  "use-debounce": {
    "component": () => import('../registry/examples/hooks-example/UseDebounceExample').then(mod => mod.UseDebounceExample),
    "source": "'use client'\n\nimport { useState, useEffect } from 'react'\nimport { Card, CardContent, CardHeader } from '@/components/ui/card'\nimport { Input } from '@/components/ui/input'\nimport { Badge } from '@/components/ui/badge'\nimport { Clock, Search, Loader2, Minus, Plus } from 'lucide-react'\nimport { Button } from '@/components/ui/button'\nimport { useDebounce } from '@/registry/hooks/use-debounce'\n\nexport const UseDebounceExample = () => {\n  const [inputValue, setInputValue] = useState('')\n  const [results, setResults] = useState<string[]>([])\n  const [isSearching, setIsSearching] = useState(false)\n  const [delay, setDelay] = useState(500)\n\n  // Debounce the input value with the selected delay\n  const debouncedValue = useDebounce(inputValue, delay)\n\n  // This effect simulates an API call whenever the debounced value changes\n  useEffect(() => {\n    // Only search if there's a value\n    if (!debouncedValue) {\n      setResults([])\n      return\n    }\n\n    const fetchResults = async () => {\n      setIsSearching(true)\n      // Simulate API call with timeout\n      await new Promise((resolve) => setTimeout(resolve, 500))\n      setResults([\n        `Result for \"\\${debouncedValue}\" - Item 1`,\n        `Result for \"\\${debouncedValue}\" - Item 2`,\n        `Result for \"\\${debouncedValue}\" - Item 3`,\n      ])\n      setIsSearching(false)\n    }\n\n    fetchResults()\n  }, [debouncedValue])\n\n  return (\n    <Card className=\"mx-auto max-w-md w-full\">\n      <CardHeader className=\"pb-2\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center gap-2\">\n            <h3 className=\"text-sm font-semibold\">Debounce Search</h3>\n            <Badge variant=\"secondary\" className=\"text-xs px-2 py-0.5\">\n              <Clock className=\"h-3 w-3 mr-1\" />\n              {delay}ms\n            </Badge>\n          </div>\n          <div className=\"flex items-center gap-1\">\n            <Button\n              onClick={() => setDelay(Math.max(100, delay - 100))}\n              variant=\"outline\"\n              size=\"sm\"\n              className=\"h-6 w-6 p-0\"\n            >\n              <Minus className=\"h-3 w-3\" />\n            </Button>\n            <Button\n              onClick={() => setDelay(delay + 100)}\n              variant=\"outline\"\n              size=\"sm\"\n              className=\"h-6 w-6 p-0\"\n            >\n              <Plus className=\"h-3 w-3\" />\n            </Button>\n          </div>\n        </div>\n      </CardHeader>\n\n      <CardContent className=\"space-y-3\">\n        <div className=\"relative\">\n          <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n          <Input\n            value={inputValue}\n            onChange={(e) => setInputValue(e.target.value)}\n            placeholder=\"Type to search...\"\n            className=\"pl-10\"\n          />\n        </div>\n\n        <div className=\"grid grid-cols-2 gap-2 text-xs bg-muted/50 rounded-md p-2\">\n          <div>\n            <span className=\"text-muted-foreground\">Input:</span>\n            <div className=\"font-medium truncate\">\n              {inputValue || '(empty)'}\n            </div>\n          </div>\n          <div>\n            <span className=\"text-muted-foreground\">Debounced:</span>\n            <div className=\"font-medium truncate\">\n              {debouncedValue || '(empty)'}\n            </div>\n          </div>\n        </div>\n\n        <div className=\"min-h-[140px]\">\n          <div className=\"flex items-center justify-between mb-3\">\n            <span className=\"text-sm font-medium\">Results</span>\n            {isSearching && (\n              <div className=\"flex items-center gap-1 text-xs text-muted-foreground\">\n                <Loader2 className=\"h-3 w-3 animate-spin\" />\n                Searching...\n              </div>\n            )}\n            {!isSearching && results.length > 0 && (\n              <Badge variant=\"outline\" className=\"text-xs\">\n                {results.length} found\n              </Badge>\n            )}\n          </div>\n\n          {!isSearching && results.length > 0 && (\n            <div className=\"space-y-2\">\n              {results.map((result, index) => (\n                <div\n                  key={index}\n                  className=\"group relative p-3 bg-gradient-to-r from-muted/20 to-muted/10 rounded-lg border border-border/50 hover:border-primary/20 hover:shadow-sm transition-all duration-200 cursor-pointer\"\n                >\n                  <div className=\"flex items-start gap-3\">\n                    <div className=\"flex-shrink-0 w-8 h-8 bg-primary/10 rounded-full flex items-center justify-center\">\n                      <Search className=\"h-4 w-4 text-primary\" />\n                    </div>\n                    <div className=\"flex-1 min-w-0\">\n                      <div className=\"text-sm font-medium text-foreground mb-1\">\n                        {result.split(' - ')[1] || result}\n                      </div>\n                      <div className=\"text-xs text-muted-foreground\">\n                        Match for \"\\${debouncedValue}\" •{' '}\n                        {Math.floor(Math.random() * 100)}% relevance\n                      </div>\n                    </div>\n                    <div className=\"flex-shrink-0 opacity-0 group-hover:opacity-100 transition-opacity\">\n                      <Button variant=\"ghost\" size=\"sm\" className=\"h-6 w-6 p-0\">\n                        <Plus className=\"h-3 w-3\" />\n                      </Button>\n                    </div>\n                  </div>\n                  <div className=\"absolute inset-0 bg-gradient-to-r from-primary/5 to-transparent opacity-0 group-hover:opacity-100 transition-opacity rounded-lg\" />\n                </div>\n              ))}\n            </div>\n          )}\n\n          {isSearching && (\n            <div className=\"space-y-2\">\n              {[1, 2, 3].map((i) => (\n                <div\n                  key={i}\n                  className=\"p-3 bg-muted/20 rounded-lg border border-border/30\"\n                >\n                  <div className=\"flex items-start gap-3\">\n                    <div className=\"w-8 h-8 bg-muted rounded-full animate-pulse\" />\n                    <div className=\"flex-1 space-y-2\">\n                      <div\n                        className=\"h-4 bg-muted rounded animate-pulse\"\n                        style={{ width: `${60 + Math.random() * 30}%` }}\n                      />\n                      <div\n                        className=\"h-3 bg-muted/60 rounded animate-pulse\"\n                        style={{ width: `${40 + Math.random() * 20}%` }}\n                      />\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n\n          {!isSearching && results.length === 0 && (\n            <div className=\"flex flex-col items-center justify-center h-24 text-center\">\n              {inputValue ? (\n                <>\n                  <Search className=\"h-8 w-8 text-muted-foreground/50 mb-2\" />\n                  <div className=\"text-xs text-muted-foreground\">\n                    No results found for \"\\${inputValue}\"\n                  </div>\n                  <div className=\"text-xs text-muted-foreground/70 mt-1\">\n                    Try adjusting your search terms\n                  </div>\n                </>\n              ) : (\n                <>\n                  <div className=\"w-12 h-12 bg-muted/30 rounded-full flex items-center justify-center mb-2\">\n                    <Search className=\"h-5 w-5 text-muted-foreground/50\" />\n                  </div>\n                  <div className=\"text-xs text-muted-foreground\">\n                    Start typing to search\n                  </div>\n                </>\n              )}\n            </div>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  )\n}\n",
    "dependencies": []
  },
  "use-interval": {
    "component": () => import('../registry/examples/hooks-example/UseIntervalExample').then(mod => mod.UseIntervalExample),
    "source": "'use client'\n\nimport { Badge } from '@/components/ui/badge'\nimport { Button } from '@/components/ui/button'\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Separator } from '@/components/ui/separator'\nimport { useState } from 'react'\nimport { Play, Pause, RotateCcw, Minus, Plus, Clock } from 'lucide-react'\nimport { useInterval } from '@/registry/hooks/use-interval'\n\nexport function UseIntervalExample() {\n  const [count, setCount] = useState(0)\n  const [delay, setDelay] = useState(1000)\n\n  // Use the custom useInterval hook\n  const { start, stop, isRunning, reset } = useInterval(() => {\n    setCount((prev) => prev + 1)\n  }, delay)\n\n  const handleReset = () => {\n    setCount(0)\n    reset()\n  }\n\n  const adjustDelay = (adjustment: number) => {\n    const newDelay = Math.max(100, delay + adjustment)\n    setDelay(newDelay)\n  }\n\n  const formatDelay = (ms: number) => {\n    if (ms >= 1000) {\n      return `${(ms / 1000).toFixed(1)}s`\n    }\n    return `${ms}ms`\n  }\n\n  return (\n    <Card className=\"w-full max-w-md border\">\n      <CardContent className=\"space-y-4 pt-6\">\n        {/* Counter Display */}\n        <div className=\"bg-muted/30 rounded-md p-4\">\n          <div className=\"flex items-center justify-between mb-3\">\n            <Badge\n              variant={isRunning ? 'default' : 'outline'}\n              className=\"text-xs\"\n            >\n              {isRunning ? 'Active' : 'Idle'}\n            </Badge>\n          </div>\n\n          <div className=\"flex justify-center py-2\">\n            <div className=\"relative\">\n              <div className=\"text-5xl font-bold tabular-nums text-center text-primary\">\n                {count}\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Control Buttons */}\n        <div className=\"grid grid-cols-3 gap-2\">\n          <Button\n            onClick={start}\n            disabled={isRunning}\n            size=\"sm\"\n            variant=\"default\"\n            className=\"flex items-center justify-center\"\n          >\n            <Play className=\"w-3 h-3 mr-1.5\" />\n            Start\n          </Button>\n\n          <Button\n            onClick={stop}\n            disabled={!isRunning}\n            size=\"sm\"\n            variant=\"destructive\"\n            className=\"flex items-center justify-center\"\n          >\n            <Pause className=\"w-3 h-3 mr-1.5\" />\n            Stop\n          </Button>\n\n          <Button\n            onClick={handleReset}\n            size=\"sm\"\n            variant=\"outline\"\n            className=\"flex items-center justify-center\"\n          >\n            <RotateCcw className=\"w-3 h-3 mr-1.5\" />\n            Reset\n          </Button>\n        </div>\n\n        <Separator />\n\n        {/* Interval Controls */}\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center gap-2\">\n            <h3 className=\"text-sm font-semibold\">Interval Speed</h3>\n            <Badge variant=\"secondary\" className=\"text-xs px-2 py-0.5\">\n              <Clock className=\"h-3 w-3 mr-1\" />\n              {formatDelay(delay)}\n            </Badge>\n          </div>\n          <div className=\"flex items-center gap-1\">\n            <Button\n              onClick={() => adjustDelay(-100)}\n              variant=\"outline\"\n              size=\"sm\"\n              className=\"h-6 w-6 p-0\"\n              disabled={delay <= 100}\n            >\n              <Minus className=\"h-3 w-3\" />\n            </Button>\n            <Button\n              onClick={() => adjustDelay(100)}\n              variant=\"outline\"\n              size=\"sm\"\n              className=\"h-6 w-6 p-0\"\n            >\n              <Plus className=\"h-3 w-3\" />\n            </Button>\n          </div>\n        </div>\n\n        {/* Presets */}\n        <div className=\"flex justify-center gap-2 pt-1\">\n          {[500, 1000, 2000].map((preset) => (\n            <Button\n              key={preset}\n              onClick={() => setDelay(preset)}\n              variant={delay === preset ? 'default' : 'outline'}\n              size=\"sm\"\n              className=\"text-xs h-7\"\n            >\n              {formatDelay(preset)}\n            </Button>\n          ))}\n        </div>\n      </CardContent>\n    </Card>\n  )\n}\n",
    "dependencies": []
  },
  "use-previous": {
    "component": () => import('../registry/examples/hooks-example/UsePreviousExample').then(mod => mod.UsePreviousExample),
    "source": "'use client'\nimport { useState } from 'react'\nimport { Card, CardContent } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport { usePrevious } from '@/registry/hooks/use-previous'\nimport { PlusIcon, MinusIcon } from 'lucide-react'\n\nexport const UsePreviousExample = () => {\n  const [count, setCount] = useState(0)\n  const prevCount = usePrevious(count)\n  return (\n    <Card className=\"w-full max-w-md border\">\n      <CardContent className=\"space-y-4 pt-6\">\n        {/* Counter Display */}\n        <div className=\"bg-muted/30 rounded-md p-4 shadow-sm transition-all duration-200\">\n          <div className=\"flex justify-center py-3\">\n            <div className=\"text-6xl font-bold tabular-nums text-center text-primary transition-all duration-200\">\n              {count}\n            </div>\n          </div>\n          <div className=\"text-center text-sm mt-2 py-1 bg-muted/50 rounded-md text-muted-foreground\">\n            Previous:{' '}\n            <span className=\"font-medium\">\n              {prevCount !== undefined ? prevCount : 'N/A'}\n            </span>\n          </div>\n        </div>\n\n        {/* Control Buttons */}\n        <div className=\"grid grid-cols-2 gap-3\">\n          <Button\n            onClick={() => setCount((c) => c - 1)}\n            size=\"sm\"\n            variant=\"outline\"\n            className=\"flex items-center justify-center hover:bg-destructive/10\"\n          >\n            <MinusIcon className=\"h-4 w-4 mr-1\" /> Decrement\n          </Button>\n          <Button\n            onClick={() => setCount((c) => c + 1)}\n            size=\"sm\"\n            className=\"flex items-center justify-center\"\n          >\n            <PlusIcon className=\"h-4 w-4 mr-1\" /> Increment\n          </Button>\n        </div>\n      </CardContent>\n    </Card>\n  )\n}\n",
    "dependencies": []
  },
  "use-window-resize": {
    "component": () => import('../registry/examples/hooks-example/UseWindowResizeExample').then(mod => mod.UseWindowResizeExample),
    "source": "'use client'\n\nimport { Card, CardContent } from '@/components/ui/card'\nimport { useWindowResize } from '@/registry/hooks/use-window-resize'\nimport { ArrowsUpFromLine } from 'lucide-react'\n\nexport const UseWindowResizeExample = () => {\n  const { width = 0, height = 0 } = useWindowResize()\n\n  return (\n    <Card className=\"w-full border\">\n      <CardContent className=\"space-y-4 pt-6\">\n        {/* Dimensions Display */}\n        <div className=\"bg-muted/30 rounded-md p-4 shadow-sm transition-all duration-200\">\n          <div className=\"flex justify-center items-center gap-3 py-3\">\n            <div className=\"text-center\">\n              <div className=\"text-sm text-muted-foreground mb-1\">Width</div>\n              <div className=\"text-2xl sm:text-3xl md:text-4xl font-bold tabular-nums text-primary transition-all duration-200\">\n                {width}px\n              </div>\n            </div>\n            <div className=\"text-muted-foreground\">×</div>\n            <div className=\"text-center\">\n              <div className=\"text-sm text-muted-foreground mb-1\">Height</div>\n              <div className=\"text-2xl sm:text-3xl md:text-4xl font-bold tabular-nums text-primary transition-all duration-200\">\n                {height}px\n              </div>\n            </div>\n          </div>\n          <div className=\"text-center text-xs sm:text-sm mt-2 py-2 bg-muted/50 rounded-md text-muted-foreground flex items-center justify-center\">\n            <ArrowsUpFromLine className=\"h-3 w-3 sm:h-4 sm:w-4 mr-1 sm:mr-2\" />\n            Resize your browser window to see changes\n            <ArrowsUpFromLine className=\"h-3 w-3 sm:h-4 sm:w-4 ml-1 sm:ml-2\" />\n          </div>\n        </div>\n\n        {/* Responsive Info */}\n        <div className=\"grid grid-cols-1 gap-2\">\n          <div className=\"text-xs sm:text-sm p-2 border rounded-md\">\n            <span className=\"font-medium\">Viewport Size: </span>\n            {width < 640\n              ? 'Small (Mobile)'\n              : width < 1024\n                ? 'Medium (Tablet)'\n                : 'Large (Desktop)'}\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  )\n}\n",
    "dependencies": []
  },
  "use-debounced-callback": {
    "component": () => import('../registry/examples/hooks-example/UseDebouncedCallbackExample').then(mod => mod.UseDebouncedCallbackExample),
    "source": "'use client'\n\nimport { useState, useEffect, useReducer } from 'react'\nimport { Card, CardContent } from '@/components/ui/card'\nimport { Input } from '@/components/ui/input'\nimport { Slider } from '@/components/ui/slider'\nimport { useDebouncedCallback } from '@/registry/hooks/use-debounced-callback'\nimport { Clock, AlertTriangle, Settings } from 'lucide-react'\nimport { Checkbox } from '@/components/ui/checkbox'\nimport { Label } from '@/components/ui/label'\nimport { Button } from '@/components/ui/button'\nimport { Badge } from '@/components/ui/badge'\n\n/** State interface */\ninterface State {\n  /** Input values */\n  input: {\n    value: string\n    immediate: string\n    debounced: string\n  }\n  /** Debounce configuration */\n  config: {\n    delay: number\n    leading: boolean\n    trailing: boolean\n    maxWait: number | null\n  }\n  /** Status */\n  status: {\n    isPending: boolean\n    lastUpdated: Date | null\n  }\n  /** UI state */\n  ui: {\n    activeExample: string\n  }\n}\n\n/** Action types */\ntype Action =\n  | { type: 'SET_INPUT_VALUE'; payload: string }\n  | { type: 'SET_DEBOUNCED_VALUE'; payload: string }\n  | { type: 'UPDATE_CONFIG'; payload: Partial<State['config']> }\n  | { type: 'SET_PENDING'; payload: boolean }\n  | { type: 'SET_LAST_UPDATED'; payload: Date }\n  | { type: 'APPLY_EXAMPLE'; payload: string }\n\n/** Example presets */\nconst EXAMPLES = {\n  default: {\n    title: 'Default',\n    leading: false,\n    trailing: true,\n    maxWait: null,\n    delay: 500,\n  },\n  leading: {\n    title: 'Leading',\n    leading: true,\n    trailing: false,\n    maxWait: null,\n    delay: 500,\n  },\n  both: {\n    title: 'Both',\n    leading: true,\n    trailing: true,\n    maxWait: null,\n    delay: 500,\n  },\n  maxWait: {\n    title: 'Max Wait',\n    leading: false,\n    trailing: true,\n    maxWait: 1500,\n    delay: 500,\n  },\n  fast: {\n    title: 'Fast',\n    leading: false,\n    trailing: true,\n    maxWait: null,\n    delay: 200,\n  },\n}\n\n/** Initial state */\nconst initialState: State = {\n  input: {\n    value: '',\n    immediate: '',\n    debounced: '',\n  },\n  config: {\n    delay: 500,\n    leading: false,\n    trailing: true,\n    maxWait: null,\n  },\n  status: {\n    isPending: false,\n    lastUpdated: null,\n  },\n  ui: {\n    activeExample: 'default',\n  },\n}\n\n/** Reducer function */\nfunction reducer(state: State, action: Action): State {\n  switch (action.type) {\n    case 'SET_INPUT_VALUE':\n      return {\n        ...state,\n        input: {\n          ...state.input,\n          value: action.payload,\n          immediate: action.payload,\n        },\n      }\n    case 'SET_DEBOUNCED_VALUE':\n      return {\n        ...state,\n        input: {\n          ...state.input,\n          debounced: action.payload,\n        },\n      }\n    case 'UPDATE_CONFIG':\n      return {\n        ...state,\n        config: {\n          ...state.config,\n          ...action.payload,\n        },\n      }\n    case 'SET_PENDING':\n      return {\n        ...state,\n        status: {\n          ...state.status,\n          isPending: action.payload,\n        },\n      }\n    case 'SET_LAST_UPDATED':\n      return {\n        ...state,\n        status: {\n          ...state.status,\n          lastUpdated: action.payload,\n        },\n      }\n    case 'APPLY_EXAMPLE': {\n      const example = EXAMPLES[action.payload as keyof typeof EXAMPLES]\n      return {\n        ...state,\n        config: {\n          delay: example.delay,\n          leading: example.leading,\n          trailing: example.trailing,\n          maxWait: example.maxWait,\n        },\n        ui: {\n          ...state.ui,\n          activeExample: action.payload,\n        },\n      }\n    }\n    default:\n      return state\n  }\n}\n\nexport const UseDebouncedCallbackExample = () => {\n  const [state, dispatch] = useReducer(reducer, initialState)\n  const { input, config, status, ui } = state\n\n  /** Handle input change */\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    dispatch({ type: 'SET_INPUT_VALUE', payload: e.target.value })\n  }\n\n  /** Create debounced callback */\n  const debouncedCallback = useDebouncedCallback(\n    (value: string) => {\n      dispatch({ type: 'SET_DEBOUNCED_VALUE', payload: value })\n      dispatch({ type: 'SET_LAST_UPDATED', payload: new Date() })\n      dispatch({ type: 'SET_PENDING', payload: false })\n    },\n    config.delay,\n    {\n      leading: config.leading,\n      trailing: config.trailing,\n      maxWait: config.maxWait || undefined,\n    }\n  )\n\n  /** Apply example preset */\n  const applyExample = (exampleKey: keyof typeof EXAMPLES) => {\n    dispatch({ type: 'APPLY_EXAMPLE', payload: exampleKey })\n  }\n\n  /** Call debounced function when input changes */\n  useEffect(() => {\n    debouncedCallback(input.value)\n    dispatch({ type: 'SET_PENDING', payload: debouncedCallback.isPending() })\n  }, [input.value, debouncedCallback])\n\n  /** Update pending status periodically */\n  useEffect(() => {\n    const interval = setInterval(() => {\n      dispatch({ type: 'SET_PENDING', payload: debouncedCallback.isPending() })\n    }, 100)\n    return () => clearInterval(interval)\n  }, [debouncedCallback])\n\n  return (\n    <div className=\"max-w-4xl mx-auto space-y-4\">\n      <Card className=\"shadow-sm\">\n        <CardContent className=\"p-6 space-y-5\">\n          {/* Input */}\n          <div className=\"space-y-3\">\n            <div className=\"flex items-center justify-between\">\n              <Label className=\"text-base font-medium\">Input Field</Label>\n              <Badge\n                variant=\"outline\"\n                className={`px-3 py-1 text-sm transition-colors ${\n                  status.isPending\n                    ? 'bg-amber-100 text-amber-800 border-amber-300 animate-pulse dark:bg-amber-900/30 dark:text-amber-400 dark:border-amber-800'\n                    : 'bg-green-100 text-green-800 border-green-300 dark:bg-green-900/30 dark:text-green-400 dark:border-green-800'\n                }`}\n              >\n                {status.isPending ? (\n                  <>\n                    <AlertTriangle className=\"h-4 w-4 mr-2 text-amber-500 dark:text-amber-400\" />\n                    Pending\n                  </>\n                ) : (\n                  <>\n                    <div className=\"h-4 w-4 mr-2 rounded-full bg-green-500 dark:bg-green-400\" />\n                    Idle\n                  </>\n                )}\n              </Badge>\n            </div>\n            <Input\n              value={input.value}\n              onChange={handleInputChange}\n              placeholder=\"Start typing...\"\n              className={`h-10 text-base ${status.isPending ? 'border-amber-300 dark:border-amber-800' : ''}`}\n            />\n          </div>\n\n          {/* Quick Examples */}\n          <div className=\"space-y-3 pt-2\">\n            <Label className=\"text-base font-medium flex items-center gap-2\">\n              <Settings className=\"h-4 w-4\" />\n              Presets\n            </Label>\n            <div className=\"flex gap-2 flex-wrap\">\n              {Object.entries(EXAMPLES).map(([key, example]) => (\n                <Button\n                  key={key}\n                  variant={ui.activeExample === key ? 'default' : 'outline'}\n                  size=\"default\"\n                  onClick={() => applyExample(key as keyof typeof EXAMPLES)}\n                  className=\"h-9\"\n                >\n                  {example.title}\n                </Button>\n              ))}\n            </div>\n          </div>\n\n          {/* Controls */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 pt-2\">\n            <div className=\"space-y-3\">\n              <div className=\"flex justify-between items-center\">\n                <Label className=\"text-sm font-medium\">Delay</Label>\n                <span className=\"text-sm text-muted-foreground font-mono\">\n                  {config.delay}ms\n                </span>\n              </div>\n              <Slider\n                value={[config.delay]}\n                min={100}\n                max={2000}\n                step={100}\n                onValueChange={(values) =>\n                  dispatch({\n                    type: 'UPDATE_CONFIG',\n                    payload: { delay: values[0] },\n                  })\n                }\n                className=\"py-2\"\n              />\n            </div>\n            <div className=\"space-y-3\">\n              <div className=\"flex justify-between items-center\">\n                <Label className=\"text-sm font-medium\">Max Wait</Label>\n                <span className=\"text-sm text-muted-foreground font-mono\">\n                  {config.maxWait || 'None'}\n                </span>\n              </div>\n              <Slider\n                value={[config.maxWait || 0]}\n                min={0}\n                max={5000}\n                step={500}\n                onValueChange={(values) =>\n                  dispatch({\n                    type: 'UPDATE_CONFIG',\n                    payload: { maxWait: values[0] === 0 ? null : values[0] },\n                  })\n                }\n                className=\"py-2\"\n              />\n            </div>\n          </div>\n\n          {/* Edge Options */}\n          <div className=\"flex flex-col sm:flex-row sm:items-center gap-4 pt-2\">\n            <div className=\"flex items-center space-x-2\">\n              <Checkbox\n                id=\"leading\"\n                checked={config.leading}\n                onCheckedChange={(checked) =>\n                  dispatch({\n                    type: 'UPDATE_CONFIG',\n                    payload: { leading: checked === true },\n                  })\n                }\n                className=\"h-5 w-5\"\n              />\n              <Label htmlFor=\"leading\" className=\"text-sm font-medium\">\n                Leading Edge\n              </Label>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <Checkbox\n                id=\"trailing\"\n                checked={config.trailing}\n                onCheckedChange={(checked) =>\n                  dispatch({\n                    type: 'UPDATE_CONFIG',\n                    payload: { trailing: checked === true },\n                  })\n                }\n                className=\"h-5 w-5\"\n              />\n              <Label htmlFor=\"trailing\" className=\"text-sm font-medium\">\n                Trailing Edge\n              </Label>\n            </div>\n            <div className=\"flex gap-2 sm:ml-auto mt-2 sm:mt-0\">\n              <Button\n                variant=\"outline\"\n                onClick={() => debouncedCallback.cancel()}\n              >\n                Cancel\n              </Button>\n              <Button\n                variant=\"outline\"\n                onClick={() => {\n                  debouncedCallback.flush()\n                  dispatch({ type: 'SET_PENDING', payload: false })\n                }}\n              >\n                Flush\n              </Button>\n            </div>\n          </div>\n\n          {/* Results */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-5 pt-2 mt-4 border-t\">\n            <div className=\"space-y-2\">\n              <div className=\"flex items-center gap-2\">\n                <div className=\"h-3 w-3 rounded-full bg-green-500\" />\n                <Label className=\"text-sm font-medium\">Immediate Value</Label>\n              </div>\n              <div className=\"p-3 bg-muted/50 rounded-md text-base font-mono min-h-[48px] flex items-center\">\n                {input.immediate || (\n                  <span className=\"text-muted-foreground text-sm italic\">\n                    Empty\n                  </span>\n                )}\n              </div>\n            </div>\n            <div className=\"space-y-2\">\n              <div className=\"flex items-center gap-2\">\n                <div className=\"h-3 w-3 rounded-full bg-blue-500\" />\n                <Label className=\"text-sm font-medium\">Debounced Value</Label>\n              </div>\n              <div className=\"p-3 bg-muted/50 rounded-md text-base font-mono min-h-[48px] flex items-center\">\n                {input.debounced || (\n                  <span className=\"text-muted-foreground text-sm italic\">\n                    Empty\n                  </span>\n                )}\n              </div>\n            </div>\n          </div>\n\n          {/* Last Updated */}\n          {status.lastUpdated && (\n            <div className=\"flex items-center justify-center gap-2 text-sm text-muted-foreground pt-3 mt-2 border-t\">\n              <Clock className=\"h-4 w-4\" />\n              <span>\n                Last update:{' '}\n                {status.lastUpdated.toLocaleTimeString([], { hour12: false })}\n              </span>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  )\n}\n\nexport default UseDebouncedCallbackExample\n",
    "dependencies": []
  },
  "use-event-listener": {
    "component": () => import('../registry/examples/hooks-example/UseEventListenerExample').then(mod => mod.UseEventListenerExample),
    "source": "'use client'\n\nimport { Card, CardContent } from '@/components/ui/card'\nimport { useEventListener } from '@/registry/hooks/use-event-listener'\nimport { MousePointer, EyeIcon, EyeOffIcon, Keyboard } from 'lucide-react'\nimport { useState, useRef } from 'react'\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'\nimport Link from 'next/link'\n\nexport const UseEventListenerExample = () => {\n  return (\n    <Card className=\"w-full border\">\n      <CardContent className=\"pt-6\">\n        <Tabs defaultValue=\"click\">\n          <TabsList className=\"grid grid-cols-3 mb-4\">\n            <TabsTrigger value=\"click\">Click Events</TabsTrigger>\n            <TabsTrigger value=\"keyboard\">Keyboard Events</TabsTrigger>\n            <TabsTrigger value=\"delegation\">Event Delegation</TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"click\" className=\"space-y-4\">\n            <ClickExample />\n          </TabsContent>\n\n          <TabsContent value=\"keyboard\" className=\"space-y-4\">\n            <KeyboardExample />\n          </TabsContent>\n\n          <TabsContent value=\"delegation\" className=\"space-y-4\">\n            <DelegationExample />\n          </TabsContent>\n        </Tabs>\n      </CardContent>\n    </Card>\n  )\n}\n\n// Example 1: Basic click events (similar to original)\nconst ClickExample = () => {\n  const [isVisible, setIsVisible] = useState(true)\n  const [clickCount, setClickCount] = useState(0)\n\n  // Using useEventListener with window (default target)\n  useEventListener('click', () => {\n    setIsVisible(!isVisible)\n    setClickCount((prev) => prev + 1)\n  })\n\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"bg-muted/30 rounded-md p-4 shadow-sm transition-all duration-200\">\n        <div className=\"flex justify-center items-center gap-3 py-3\">\n          <div className=\"text-center\">\n            <div className=\"text-sm text-muted-foreground mb-1\">Status</div>\n            <div className=\"text-2xl sm:text-3xl md:text-4xl font-bold tabular-nums text-primary transition-all duration-200 flex items-center justify-center\">\n              {isVisible ? (\n                <>\n                  <EyeIcon className=\"h-6 w-6 mr-2\" />\n                  Visible\n                </>\n              ) : (\n                <>\n                  <EyeOffIcon className=\"h-6 w-6 mr-2\" />\n                  Hidden\n                </>\n              )}\n            </div>\n          </div>\n        </div>\n\n        <div className=\"text-xs sm:text-sm text-center mt-2 font-medium\">\n          <MousePointer className=\"inline h-3 w-3 mr-1\" />\n          Click anywhere to toggle visibility (click count: {clickCount})\n        </div>\n      </div>\n\n      <div className=\"text-sm p-2 bg-muted/30 text-muted-foreground rounded border\">\n        <code className=\"font-mono text-xs\">\n          useEventListener('click', handler)\n        </code>{' '}\n        - Attaches to window by default\n      </div>\n    </div>\n  )\n}\n\n// Example 2: Keyboard events\nconst KeyboardExample = () => {\n  const [lastKey, setLastKey] = useState<string>('None')\n  const [keyHistory, setKeyHistory] = useState<string[]>([])\n\n  // Using useEventListener with document and keyboard events\n  useEventListener(\n    'keydown',\n    (event) => {\n      const key = event.key\n      setLastKey(key)\n      setKeyHistory((prev) => [key, ...prev.slice(0, 4)])\n    },\n    document\n  )\n\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"bg-muted/30 rounded-md p-4 shadow-sm\">\n        <div className=\"flex justify-center items-center py-3\">\n          <div className=\"text-center\">\n            <div className=\"text-sm text-muted-foreground mb-1\">\n              Last Key Pressed\n            </div>\n            <div className=\"text-2xl sm:text-3xl font-mono font-bold text-primary flex items-center justify-center\">\n              <Keyboard className=\"h-5 w-5 mr-2\" />\n              {lastKey === ' ' ? 'Space' : lastKey}\n            </div>\n          </div>\n        </div>\n\n        <div className=\"mt-4 grid grid-cols-5 gap-2\">\n          {keyHistory.map((key, index) => (\n            <div\n              key={index}\n              className=\"bg-muted p-2 rounded text-center text-sm font-mono border\"\n            >\n              {key === ' ' ? 'Space' : key}\n            </div>\n          ))}\n        </div>\n\n        <div className=\"text-center text-xs sm:text-sm mt-4 py-2 bg-muted/50 rounded-md text-muted-foreground\">\n          Press any key to see it captured here\n        </div>\n      </div>\n\n      <div className=\"text-sm p-2 bg-muted/30 text-muted-foreground rounded border\">\n        <code className=\"font-mono text-xs\">\n          useEventListener('keydown', handler, document)\n        </code>{' '}\n        - Attaches to document\n      </div>\n    </div>\n  )\n}\n\n// Example 3: Event delegation\nconst DelegationExample = () => {\n  const [users, setUsers] = useState([\n    {\n      id: 1,\n      name: 'Alex Johnson',\n      email: 'alex@example.com',\n      status: 'Active',\n    },\n    {\n      id: 2,\n      name: 'Sam Williams',\n      email: 'sam@example.com',\n      status: 'Inactive',\n    },\n    {\n      id: 3,\n      name: 'Taylor Brown',\n      email: 'taylor@example.com',\n      status: 'Active',\n    },\n    {\n      id: 4,\n      name: 'Jordan Smith',\n      email: 'jordan@example.com',\n      status: 'Pending',\n    },\n    {\n      id: 5,\n      name: 'Casey Miller',\n      email: 'casey@example.com',\n      status: 'Active',\n    },\n  ])\n  const [lastAction, setLastAction] = useState<string>('')\n  const [sortField, setSortField] = useState<string>('name')\n  const [sortDirection, setSortDirection] = useState<'asc' | 'desc'>('asc')\n  const [selectedRows, setSelectedRows] = useState<number[]>([])\n\n  const tableRef = useRef<HTMLTableElement>(null)\n\n  // Sort users based on current sort field and direction\n  const sortedUsers = [...users].sort((a, b) => {\n    const aValue = a[sortField as keyof typeof a]\n    const bValue = b[sortField as keyof typeof b]\n    return sortDirection === 'asc'\n      ? String(aValue).localeCompare(String(bValue))\n      : String(bValue).localeCompare(String(aValue))\n  })\n\n  // Using a SINGLE event listener to handle ALL table interactions\n  useEventListener(\n    'click',\n    (event, target) => {\n      if (!target) return\n\n      // Handle different actions based on data attributes\n      const action = target.getAttribute('data-action')\n\n      if (action === 'sort') {\n        const field = target.getAttribute('data-field')\n        if (field) {\n          if (sortField === field) {\n            // Toggle direction if clicking same field\n            setSortDirection(sortDirection === 'asc' ? 'desc' : 'asc')\n          } else {\n            // New field, default to ascending\n            setSortField(field)\n            setSortDirection('asc')\n          }\n          setLastAction(\n            `Sorted by ${field} (${sortDirection === 'asc' ? 'ascending' : 'descending'})`\n          )\n        }\n      } else if (action === 'select-all') {\n        if (selectedRows.length === users.length) {\n          // Deselect all\n          setSelectedRows([])\n          setLastAction('Deselected all rows')\n        } else {\n          // Select all\n          setSelectedRows(users.map((u) => u.id))\n          setLastAction('Selected all rows')\n        }\n      } else if (action === 'select-row') {\n        const rowId = parseInt(target.getAttribute('data-id') || '0')\n        if (rowId) {\n          setSelectedRows((prev) =>\n            prev.includes(rowId)\n              ? prev.filter((id) => id !== rowId)\n              : [...prev, rowId]\n          )\n          setLastAction(\n            `${selectedRows.includes(rowId) ? 'Deselected' : 'Selected'} user #${rowId}`\n          )\n        }\n      } else if (action === 'view') {\n        const userId = target.closest('tr')?.getAttribute('data-id')\n        const user = users.find((u) => u.id.toString() === userId)\n        setLastAction(`Viewing details for ${user?.name}`)\n      } else if (action === 'edit') {\n        const userId = target.closest('tr')?.getAttribute('data-id')\n        const user = users.find((u) => u.id.toString() === userId)\n        setLastAction(`Editing ${user?.name}`)\n      } else if (action === 'delete') {\n        const userId = parseInt(\n          target.closest('tr')?.getAttribute('data-id') || '0'\n        )\n        if (userId) {\n          setUsers(users.filter((u) => u.id !== userId))\n          setSelectedRows(selectedRows.filter((id) => id !== userId))\n          setLastAction(`Deleted user #${userId}`)\n        }\n      }\n    },\n    tableRef.current,\n    { selector: '[data-action]' }\n  )\n\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"bg-muted/30 rounded-md p-4 shadow-sm\">\n        <div className=\"text-center mb-3\">\n          <div className=\"text-sm text-muted-foreground mb-1\">\n            Interactive Data Table\n          </div>\n          <div className=\"text-lg font-medium\">\n            One event listener for all table interactions\n          </div>\n          <span className={'text-xs text-muted-foreground'}>\n            Note: we can effectively handle table with{' '}\n            <Link\n              className=\"text-primary hover:underline\"\n              href={'https://tanstack.com/table/latest'}\n            >\n              TanStack Table\n            </Link>\n            . This example demonstrates how to use a single event listener for\n            sorting, selecting rows, and performing actions like viewing,\n            editing, and deleting users.\n          </span>\n        </div>\n\n        <div className=\"border rounded-md overflow-hidden mb-3\">\n          <table ref={tableRef} className=\"w-full text-sm\">\n            <thead className=\"bg-muted/50\">\n              <tr>\n                <th className=\"p-2 text-left\">\n                  <div className=\"flex items-center\">\n                    <input\n                      type=\"checkbox\"\n                      checked={\n                        selectedRows.length === users.length && users.length > 0\n                      }\n                      data-action=\"select-all\"\n                      className=\"mr-2\"\n                    />\n                    <span\n                      data-action=\"sort\"\n                      data-field=\"id\"\n                      className=\"cursor-pointer hover:text-primary flex items-center\"\n                    >\n                      ID\n                      {sortField === 'id' && (\n                        <span className=\"ml-1\">\n                          {sortDirection === 'asc' ? '↑' : '↓'}\n                        </span>\n                      )}\n                    </span>\n                  </div>\n                </th>\n                <th className=\"p-2 text-left\">\n                  <span\n                    data-action=\"sort\"\n                    data-field=\"name\"\n                    className=\"cursor-pointer hover:text-primary flex items-center\"\n                  >\n                    Name\n                    {sortField === 'name' && (\n                      <span className=\"ml-1\">\n                        {sortDirection === 'asc' ? '↑' : '↓'}\n                      </span>\n                    )}\n                  </span>\n                </th>\n                <th className=\"p-2 text-left\">\n                  <span\n                    data-action=\"sort\"\n                    data-field=\"email\"\n                    className=\"cursor-pointer hover:text-primary flex items-center\"\n                  >\n                    Email\n                    {sortField === 'email' && (\n                      <span className=\"ml-1\">\n                        {sortDirection === 'asc' ? '↑' : '↓'}\n                      </span>\n                    )}\n                  </span>\n                </th>\n                <th className=\"p-2 text-left\">\n                  <span\n                    data-action=\"sort\"\n                    data-field=\"status\"\n                    className=\"cursor-pointer hover:text-primary flex items-center\"\n                  >\n                    Status\n                    {sortField === 'status' && (\n                      <span className=\"ml-1\">\n                        {sortDirection === 'asc' ? '↑' : '↓'}\n                      </span>\n                    )}\n                  </span>\n                </th>\n                <th className=\"p-2 text-center\">Actions</th>\n              </tr>\n            </thead>\n            <tbody>\n              {sortedUsers.map((user) => (\n                <tr\n                  key={user.id}\n                  data-id={user.id}\n                  className={`border-t ${\n                    selectedRows.includes(user.id)\n                      ? 'bg-primary/10 dark:bg-primary/20'\n                      : 'bg-background dark:bg-card'\n                  }`}\n                >\n                  <td className=\"p-2\">\n                    <div className=\"flex items-center\">\n                      <input\n                        type=\"checkbox\"\n                        checked={selectedRows.includes(user.id)}\n                        data-action=\"select-row\"\n                        data-id={user.id}\n                        className=\"mr-2\"\n                      />\n                      {user.id}\n                    </div>\n                  </td>\n                  <td className=\"p-2\">{user.name}</td>\n                  <td className=\"p-2\">{user.email}</td>\n                  <td className=\"p-2\">\n                    <span\n                      className={`px-2 py-1 rounded-full text-xs ${\n                        user.status === 'Active'\n                          ? 'bg-success/20 text-success dark:bg-success/30 dark:text-success-foreground'\n                          : user.status === 'Inactive'\n                            ? 'bg-muted text-muted-foreground dark:bg-muted/70'\n                            : 'bg-warning/20 text-warning dark:bg-warning/30 dark:text-warning-foreground'\n                      }`}\n                    >\n                      {user.status}\n                    </span>\n                  </td>\n                  <td className=\"p-2 text-center\">\n                    <div className=\"flex justify-center space-x-1\">\n                      <button\n                        data-action=\"view\"\n                        className=\"p-1 text-primary hover:text-primary/80 dark:text-primary dark:hover:text-primary/90\"\n                        title=\"View details\"\n                      >\n                        👁️\n                      </button>\n                      <button\n                        data-action=\"edit\"\n                        className=\"p-1 text-warning hover:text-warning/80 dark:text-warning dark:hover:text-warning/90\"\n                        title=\"Edit user\"\n                      >\n                        ✏️\n                      </button>\n                      <button\n                        data-action=\"delete\"\n                        className=\"p-1 text-destructive hover:text-destructive/80 dark:text-destructive dark:hover:text-destructive/90\"\n                        title=\"Delete user\"\n                      >\n                        🗑️\n                      </button>\n                    </div>\n                  </td>\n                </tr>\n              ))}\n              {users.length === 0 && (\n                <tr>\n                  <td\n                    colSpan={5}\n                    className=\"p-4 text-center text-muted-foreground\"\n                  >\n                    No users found\n                  </td>\n                </tr>\n              )}\n            </tbody>\n          </table>\n        </div>\n\n        {lastAction && (\n          <div className=\"text-center p-2 border rounded-md bg-muted/50 text-sm\">\n            Last action: <span className=\"font-medium\">{lastAction}</span>\n          </div>\n        )}\n      </div>\n\n      <div className=\"text-sm p-2 bg-muted/30 text-muted-foreground rounded border\">\n        <code className=\"font-mono text-xs\">\n          useEventListener('click', handler, tableRef, &#123; selector:\n          '[data-action]' &#125;)\n        </code>\n        <div className=\"mt-2 text-xs space-y-1\">\n          <p>\n            This data table demonstrates the ideal use case for event\n            delegation:\n          </p>\n          <ul className=\"list-disc ml-5 space-y-1\">\n            <li>\n              A single event listener handles 7+ different actions (sort\n              columns, select rows, view/edit/delete)\n            </li>\n            <li>\n              Works efficiently even with many rows without performance\n              degradation\n            </li>\n            <li>Automatically works with dynamically added/removed elements</li>\n            <li>Uses data attributes to simplify event handling logic</li>\n          </ul>\n        </div>\n      </div>\n    </div>\n  )\n}\n",
    "dependencies": []
  },
  "use-local-storage-1": {
    "component": () => import('../registry/examples/hooks-example/UseLocalStorageExamples/BasicExample').then(mod => mod.BasicExample),
    "source": "'use client'\n\nimport { Button } from '@/components/ui/button'\nimport { Input } from '@/components/ui/input'\nimport { Label } from '@/components/ui/label'\nimport { useLocalStorage } from '@/registry/hooks/use-local-storage'\nimport { Trash2 } from 'lucide-react'\n\n// Example 1: Basic counter with localStorage persistence\nexport const BasicExample = () => {\n  const [count, setCount, removeCount] = useLocalStorage('counter', 0)\n  const [name, setName, removeName] = useLocalStorage('user-name', '')\n\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"bg-muted/30 rounded-md p-4 shadow-sm\">\n        <div className=\"text-center mb-4\">\n          <div className=\"text-sm text-muted-foreground mb-1\">\n            Persistent Counter\n          </div>\n          <div className=\"text-4xl font-bold text-primary mb-2\">{count}</div>\n          <div className=\"flex justify-center gap-2\">\n            <Button onClick={() => setCount(count + 1)} size=\"sm\">\n              Increment\n            </Button>\n            <Button\n              onClick={() => setCount(count - 1)}\n              variant=\"outline\"\n              size=\"sm\"\n            >\n              Decrement\n            </Button>\n            <Button onClick={() => setCount(0)} variant=\"secondary\" size=\"sm\">\n              Reset\n            </Button>\n            <Button onClick={removeCount} variant=\"destructive\" size=\"sm\">\n              <Trash2 className=\"h-4 w-4\" />\n            </Button>\n          </div>\n        </div>\n\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"name\">Your Name (persisted)</Label>\n          <div className=\"flex gap-2\">\n            <Input\n              id=\"name\"\n              value={name}\n              onChange={(e) => setName(e.target.value)}\n              placeholder=\"Enter your name...\"\n              className=\"flex-1\"\n            />\n            <Button onClick={removeName} variant=\"outline\" size=\"sm\">\n              Clear\n            </Button>\n          </div>\n          {name && (\n            <div className=\"text-sm text-muted-foreground\">\n              Hello, <span className=\"font-medium\">{name}</span>! 👋\n            </div>\n          )}\n        </div>\n      </div>\n\n      <div className=\"text-sm p-2 bg-muted/30 text-muted-foreground rounded border\">\n        <code className=\"font-mono text-xs\">\n          const [value, setValue, removeValue] = useLocalStorage(key,\n          initialValue)\n        </code>\n        <div className=\"mt-1 text-xs\">\n          Refresh the page to see values persist across sessions\n        </div>\n      </div>\n    </div>\n  )\n}\n",
    "dependencies": []
  },
  "use-local-storage-2": {
    "component": () => import('../registry/examples/hooks-example/UseLocalStorageExamples/SettingsExample').then(mod => mod.SettingsExample),
    "source": "'use client'\n\nimport { Badge } from '@/components/ui/badge'\nimport { Button } from '@/components/ui/button'\nimport { Input } from '@/components/ui/input'\nimport { Label } from '@/components/ui/label'\nimport { Switch } from '@/components/ui/switch'\nimport { useLocalStorage } from '@/registry/hooks/use-local-storage'\nimport { Database, Settings, Trash2 } from 'lucide-react'\n\n// Example 2: User settings with complex object\nexport const SettingsExample = () => {\n  const [settings, setSettings, removeSettings] = useLocalStorage(\n    'user-settings',\n    {\n      theme: 'light',\n      notifications: true,\n      language: 'en',\n      autoSave: false,\n      fontSize: 14,\n    }\n  )\n\n  const updateSetting = (key: string, value: any) => {\n    setSettings((prev) => ({ ...prev, [key]: value }))\n  }\n\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"bg-muted/30 rounded-md p-4 shadow-sm\">\n        <div className=\"flex items-center gap-2 mb-4\">\n          <Settings className=\"h-5 w-5\" />\n          <h3 className=\"text-lg font-semibold\">User Preferences</h3>\n          <Badge variant=\"secondary\" className=\"ml-auto\">\n            <Database className=\"h-3 w-3 mr-1\" />\n            Saved Locally\n          </Badge>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <div className=\"space-y-2\">\n            <Label>Theme</Label>\n            <div className=\"flex gap-2\">\n              {['light', 'dark', 'auto'].map((theme) => (\n                <Button\n                  key={theme}\n                  onClick={() => updateSetting('theme', theme)}\n                  variant={settings.theme === theme ? 'default' : 'outline'}\n                  size=\"sm\"\n                  className=\"capitalize\"\n                >\n                  {theme}\n                </Button>\n              ))}\n            </div>\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label>Language</Label>\n            <div className=\"flex gap-2\">\n              {[\n                { code: 'en', name: 'English' },\n                { code: 'es', name: 'Spanish' },\n                { code: 'fr', name: 'French' },\n              ].map((lang) => (\n                <Button\n                  key={lang.code}\n                  onClick={() => updateSetting('language', lang.code)}\n                  variant={\n                    settings.language === lang.code ? 'default' : 'outline'\n                  }\n                  size=\"sm\"\n                >\n                  {lang.name}\n                </Button>\n              ))}\n            </div>\n          </div>\n\n          <div className=\"flex items-center justify-between space-x-2\">\n            <Label htmlFor=\"notifications\">Push Notifications</Label>\n            <Switch\n              id=\"notifications\"\n              checked={settings.notifications}\n              onCheckedChange={(checked) =>\n                updateSetting('notifications', checked)\n              }\n            />\n          </div>\n\n          <div className=\"flex items-center justify-between space-x-2\">\n            <Label htmlFor=\"autoSave\">Auto Save</Label>\n            <Switch\n              id=\"autoSave\"\n              checked={settings.autoSave}\n              onCheckedChange={(checked) => updateSetting('autoSave', checked)}\n            />\n          </div>\n\n          <div className=\"space-y-2 md:col-span-2\">\n            <Label htmlFor=\"fontSize\">Font Size: {settings.fontSize}px</Label>\n            <Input\n              id=\"fontSize\"\n              type=\"range\"\n              min=\"12\"\n              max=\"20\"\n              value={settings.fontSize}\n              onChange={(e) =>\n                updateSetting('fontSize', parseInt(e.target.value))\n              }\n              className=\"w-full\"\n            />\n          </div>\n        </div>\n\n        <div className=\"mt-4 p-3 bg-muted/50 rounded border\">\n          <div className=\"text-sm font-medium mb-2\">Current Settings:</div>\n          <pre className=\"text-xs bg-background p-2 rounded border overflow-auto\">\n            {JSON.stringify(settings, null, 2)}\n          </pre>\n        </div>\n\n        <div className=\"flex gap-2 mt-4\">\n          <Button onClick={removeSettings} variant=\"destructive\" size=\"sm\">\n            <Trash2 className=\"h-4 w-4 mr-1\" />\n            Reset All\n          </Button>\n        </div>\n      </div>\n\n      <div className=\"text-sm p-2 bg-muted/30 text-muted-foreground rounded border\">\n        <code className=\"font-mono text-xs\">\n          useLocalStorage('user-settings', defaultObject)\n        </code>\n        <div className=\"mt-1 text-xs\">\n          Complex objects are automatically serialized/deserialized\n        </div>\n      </div>\n    </div>\n  )\n}\n",
    "dependencies": []
  },
  "use-local-storage-3": {
    "component": () => import('../registry/examples/hooks-example/UseLocalStorageExamples/FormExample').then(mod => mod.FormExample),
    "source": "'use client'\nimport { Badge } from '@/components/ui/badge'\nimport { Button } from '@/components/ui/button'\nimport { Input } from '@/components/ui/input'\nimport { Label } from '@/components/ui/label'\nimport { Textarea } from '@/components/ui/textarea'\nimport { useLocalStorage } from '@/registry/hooks/use-local-storage'\nimport { Save, Trash2 } from 'lucide-react'\nimport { useState } from 'react'\n\n// Example 3: Form data persistence\nexport const FormExample = () => {\n  type DraftForm = {\n    title: string\n    content: string\n    category: string\n    tags: string[]\n    priority: string\n  }\n\n  const [formData, setFormData, removeFormData] = useLocalStorage<DraftForm>(\n    'draft-form',\n    {\n      title: '',\n      content: '',\n      category: 'general',\n      tags: [],\n      priority: 'medium',\n    }\n  )\n\n  const [newTag, setNewTag] = useState('')\n\n  const updateField = (field: string, value: any) => {\n    setFormData((prev) => ({ ...prev, [field]: value }))\n  }\n\n  const addTag = () => {\n    if (newTag.trim() && !formData.tags.includes(newTag.trim())) {\n      updateField('tags', [...formData.tags, newTag.trim()])\n      setNewTag('')\n    }\n  }\n\n  const removeTag = (tagToRemove: string) => {\n    updateField(\n      'tags',\n      formData.tags.filter((tag) => tag !== tagToRemove)\n    )\n  }\n\n  const handleSubmit = () => {\n    alert('Form submitted! (In real app, this would save to server)')\n    removeFormData() // Clear draft after submission\n  }\n\n  const isEmpty =\n    !formData.title && !formData.content && formData.tags.length === 0\n\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"bg-muted/30 rounded-md p-4 shadow-sm\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <h3 className=\"text-lg font-semibold\">Draft Article</h3>\n          <div className=\"flex items-center gap-2\">\n            {!isEmpty && (\n              <Badge variant=\"outline\">\n                <Save className=\"h-3 w-3 mr-1\" />\n                Auto-saved\n              </Badge>\n            )}\n          </div>\n        </div>\n\n        <div className=\"space-y-4\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"title\">Title</Label>\n            <Input\n              id=\"title\"\n              value={formData.title}\n              onChange={(e) => updateField('title', e.target.value)}\n              placeholder=\"Enter article title...\"\n            />\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"content\">Content</Label>\n            <Textarea\n              id=\"content\"\n              value={formData.content}\n              onChange={(e) => updateField('content', e.target.value)}\n              placeholder=\"Write your article content here...\"\n              rows={6}\n            />\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label>Tags</Label>\n            <div className=\"flex gap-2\">\n              <Input\n                value={newTag}\n                onChange={(e) => setNewTag(e.target.value)}\n                placeholder=\"Add tag...\"\n                onKeyUp={(e) => e.key === 'Enter' && addTag()}\n                className=\"flex-1\"\n              />\n              <Button onClick={addTag} size=\"sm\" disabled={!newTag.trim()}>\n                Add\n              </Button>\n            </div>\n            {formData.tags.length > 0 && (\n              <div className=\"flex flex-wrap gap-2 mt-2\">\n                {formData.tags.map((tag) => (\n                  <Badge\n                    key={tag}\n                    variant=\"secondary\"\n                    className=\"cursor-pointer hover:bg-destructive hover:text-destructive-foreground\"\n                    onClick={() => removeTag(tag)}\n                  >\n                    {tag} ×\n                  </Badge>\n                ))}\n              </div>\n            )}\n          </div>\n        </div>\n\n        <div className=\"flex gap-2 mt-6\">\n          <Button onClick={handleSubmit} disabled={isEmpty}>\n            Submit Article\n          </Button>\n          <Button onClick={removeFormData} variant=\"outline\" disabled={isEmpty}>\n            <Trash2 className=\"h-4 w-4 mr-1\" />\n            Clear Draft\n          </Button>\n        </div>\n      </div>\n\n      <div className=\"text-sm p-2 bg-muted/30 text-muted-foreground rounded border\">\n        <code className=\"font-mono text-xs\">\n          Auto-saves form data as you type - try refreshing the page!\n        </code>\n      </div>\n    </div>\n  )\n}\n",
    "dependencies": []
  },
  "use-local-storage-4": {
    "component": () => import('../registry/examples/hooks-example/UseLocalStorageExamples/AdvancedExample').then(mod => mod.AdvancedExample),
    "source": "'use client'\nimport { Button } from '@/components/ui/button'\nimport { useLocalStorage } from '@/registry/hooks/use-local-storage'\nimport { RefreshCw } from 'lucide-react'\n\n// Example 4: Advanced usage with custom serialization\nexport const AdvancedExample = () => {\n  // Custom serialization for Date objects\n  const [lastVisit, setLastVisit, removeLastVisit] = useLocalStorage(\n    'last-visit',\n    new Date(),\n    {\n      serializer: (date: Date) => date.toISOString(),\n      deserializer: (dateStr: string) => new Date(dateStr),\n    }\n  )\n\n  // Shopping cart with complex data\n  type CartItem = {\n    id: number\n    name: string\n    price: number\n    quantity: number\n    addedAt: Date\n  }\n  const [cart, setCart, removeCart] = useLocalStorage<CartItem[]>(\n    'shopping-cart',\n    []\n  )\n\n  const addToCart = () => {\n    const newItem = {\n      id: Date.now(),\n      name: `Item ${cart.length + 1}`,\n      price: Math.floor(Math.random() * 100) + 10,\n      quantity: 1,\n      addedAt: new Date(),\n    }\n    setCart([...cart, newItem])\n  }\n\n  const updateVisit = () => {\n    setLastVisit(new Date())\n  }\n\n  const totalPrice = cart.reduce(\n    (sum, item) => sum + item.price * item.quantity,\n    0\n  )\n\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"bg-muted/30 rounded-md p-4 shadow-sm\">\n        <h3 className=\"text-lg font-semibold mb-4\">Advanced Features</h3>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n          <div className=\"space-y-3\">\n            <h4 className=\"font-medium\">Custom Date Serialization</h4>\n            <div className=\"p-3 bg-muted/50 rounded\">\n              <div className=\"text-sm text-muted-foreground\">Last Visit:</div>\n              <div className=\"font-mono text-sm\">\n                {lastVisit.toLocaleString()}\n              </div>\n              <Button onClick={updateVisit} size=\"sm\" className=\"mt-2\">\n                <RefreshCw className=\"h-4 w-4 mr-1\" />\n                Update Visit Time\n              </Button>\n            </div>\n          </div>\n\n          <div className=\"space-y-3\">\n            <h4 className=\"font-medium\">Shopping Cart</h4>\n            <div className=\"p-3 bg-muted/50 rounded\">\n              <div className=\"flex justify-between items-center mb-2\">\n                <span className=\"text-sm text-muted-foreground\">\n                  Items: {cart.length}\n                </span>\n                <span className=\"font-medium\">${totalPrice.toFixed(2)}</span>\n              </div>\n              <div className=\"flex gap-2\">\n                <Button onClick={addToCart} size=\"sm\">\n                  Add Item\n                </Button>\n                <Button\n                  onClick={removeCart}\n                  variant=\"outline\"\n                  size=\"sm\"\n                  disabled={cart.length === 0}\n                >\n                  Clear Cart\n                </Button>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {cart.length > 0 && (\n          <div className=\"mt-4\">\n            <h5 className=\"font-medium mb-2\">Cart Contents:</h5>\n            <div className=\"space-y-2 max-h-40 overflow-y-auto\">\n              {cart.map((item) => (\n                <div\n                  key={item.id}\n                  className=\"flex justify-between items-center p-2 bg-background rounded border text-sm\"\n                >\n                  <span>{item.name}</span>\n                  <span className=\"font-medium\">${item.price}</span>\n                </div>\n              ))}\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  )\n}\n",
    "dependencies": []
  },
  "use-session-storage-1": {
    "component": () => import('../registry/examples/hooks-example/UseSessionStorageExamples/BasicExample').then(mod => mod.BasicExample),
    "source": "'use client'\n\nimport { Button } from '@/components/ui/button'\nimport { Input } from '@/components/ui/input'\nimport { Label } from '@/components/ui/label'\nimport { useSessionStorage } from '@/registry/hooks/use-session-storage'\nimport { Trash2 } from 'lucide-react'\n\n// Example 1: Session-based interaction counter\nexport const BasicExample = () => {\n  const [clickCount, setClickCount, removeClickCount] = useSessionStorage(\n    'session-clicks',\n    0\n  )\n  const [nickname, setNickname, removeNickname] = useSessionStorage(\n    'session-nickname',\n    ''\n  )\n\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"bg-muted/30 rounded-md p-4 shadow-sm\">\n        <div className=\"text-center mb-4\">\n          <div className=\"text-sm text-muted-foreground mb-1\">\n            Session Interaction Counter\n          </div>\n          <div className=\"text-4xl font-bold text-primary mb-2\">\n            {clickCount}\n          </div>\n          <div className=\"flex justify-center gap-2\">\n            <Button onClick={() => setClickCount(clickCount + 1)} size=\"sm\">\n              Register Click\n            </Button>\n            <Button\n              onClick={() => setClickCount(0)}\n              variant=\"secondary\"\n              size=\"sm\"\n            >\n              Reset\n            </Button>\n            <Button onClick={removeClickCount} variant=\"destructive\" size=\"sm\">\n              <Trash2 className=\"h-4 w-4\" />\n            </Button>\n          </div>\n        </div>\n\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"nickname\">Session Nickname</Label>\n          <div className=\"flex gap-2\">\n            <Input\n              id=\"nickname\"\n              value={nickname}\n              onChange={(e) => setNickname(e.target.value)}\n              placeholder=\"Enter temporary nickname...\"\n              className=\"flex-1\"\n            />\n            <Button onClick={removeNickname} variant=\"outline\" size=\"sm\">\n              Clear\n            </Button>\n          </div>\n          {nickname && (\n            <div className=\"text-sm text-muted-foreground\">\n              Current nickname: <span className=\"font-medium\">{nickname}</span>\n            </div>\n          )}\n        </div>\n      </div>\n\n      <div className=\"text-sm p-2 bg-muted/30 text-muted-foreground rounded border\">\n        <code className=\"font-mono text-xs\">\n          const [value, setValue, removeValue] = useSessionStorage(key,\n          initialValue)\n        </code>\n        <div className=\"mt-1 text-xs\">\n          Tracks interactions and nickname for this session only - close tab to\n          clear\n        </div>\n      </div>\n    </div>\n  )\n}\n",
    "dependencies": []
  },
  "use-session-storage-2": {
    "component": () => import('../registry/examples/hooks-example/UseSessionStorageExamples/SettingsExample').then(mod => mod.SettingsExample),
    "source": "'use client'\n\nimport { Badge } from '@/components/ui/badge'\nimport { Button } from '@/components/ui/button'\nimport { Label } from '@/components/ui/label'\nimport { Switch } from '@/components/ui/switch'\nimport { useSessionStorage } from '@/registry/hooks/use-session-storage'\nimport { Save, Settings, Trash2 } from 'lucide-react'\n\n// Example 2: Session-based UI preferences\nexport const SettingsExample = () => {\n  const [uiSettings, setUiSettings, removeUiSettings] = useSessionStorage(\n    'session-ui-settings',\n    {\n      showBanner: true,\n      showTooltips: true,\n      highContrast: false,\n    }\n  )\n\n  const updateSetting = (key: string, value: any) => {\n    setUiSettings((prev) => ({ ...prev, [key]: value }))\n  }\n\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"bg-muted/30 rounded-md p-4 shadow-sm\">\n        <div className=\"flex items-center gap-2 mb-4\">\n          <Settings className=\"h-5 w-5\" />\n          <h3 className=\"text-lg font-semibold\">Session UI Preferences</h3>\n          <Badge variant=\"secondary\" className=\"ml-auto\">\n            <Save className=\"h-3 w-3 mr-1\" />\n            Session Saved\n          </Badge>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <div className=\"flex items-center justify-between space-x-2\">\n            <Label htmlFor=\"showBanner\">Show Welcome Banner</Label>\n            <Switch\n              id=\"showBanner\"\n              checked={uiSettings.showBanner}\n              onCheckedChange={(checked) =>\n                updateSetting('showBanner', checked)\n              }\n            />\n          </div>\n\n          <div className=\"flex items-center justify-between space-x-2\">\n            <Label htmlFor=\"showTooltips\">Show Tooltips</Label>\n            <Switch\n              id=\"showTooltips\"\n              checked={uiSettings.showTooltips}\n              onCheckedChange={(checked) =>\n                updateSetting('showTooltips', checked)\n              }\n            />\n          </div>\n\n          <div className=\"flex items-center justify-between space-x-2\">\n            <Label htmlFor=\"highContrast\">High Contrast Mode</Label>\n            <Switch\n              id=\"highContrast\"\n              checked={uiSettings.highContrast}\n              onCheckedChange={(checked) =>\n                updateSetting('highContrast', checked)\n              }\n            />\n          </div>\n        </div>\n\n        <div className=\"mt-4 p-3 bg-muted/50 rounded border\">\n          <div className=\"text-sm font-medium mb-2\">Current UI Settings:</div>\n          <pre className=\"text-xs bg-background p-2 rounded border overflow-auto\">\n            {JSON.stringify(uiSettings, null, 2)}\n          </pre>\n        </div>\n\n        <div className=\"flex gap-2 mt-4\">\n          <Button onClick={removeUiSettings} variant=\"destructive\" size=\"sm\">\n            <Trash2 className=\"h-4 w-4 mr-1\" />\n            Reset Preferences\n          </Button>\n        </div>\n      </div>\n\n      <div className=\"text-sm p-2 bg-muted/30 text-muted-foreground rounded border\">\n        <code className=\"font-mono text-xs\">\n          useSessionStorage('session-ui-settings', defaultObject)\n        </code>\n        <div className=\"mt-1 text-xs\">\n          UI preferences persist only for this session - close tab to reset\n        </div>\n      </div>\n    </div>\n  )\n}\n",
    "dependencies": []
  },
  "use-session-storage-3": {
    "component": () => import('../registry/examples/hooks-example/UseSessionStorageExamples/FormExample').then(mod => mod.FormExample),
    "source": "'use client'\n\nimport { Badge } from '@/components/ui/badge'\nimport { Button } from '@/components/ui/button'\nimport { Input } from '@/components/ui/input'\nimport { Label } from '@/components/ui/label'\nimport { Textarea } from '@/components/ui/textarea'\nimport { useSessionStorage } from '@/registry/hooks/use-session-storage'\nimport { Save, Trash2 } from 'lucide-react'\nimport { useState } from 'react'\n\n// Example 3: Temporary note draft\nexport const FormExample = () => {\n  type NoteDraft = {\n    title: string\n    content: string\n    tags: string[]\n  }\n\n  const [noteData, setNoteData, removeNoteData] = useSessionStorage<NoteDraft>(\n    'session-note-draft',\n    {\n      title: '',\n      content: '',\n      tags: [],\n    }\n  )\n\n  const [newTag, setNewTag] = useState('')\n\n  const updateField = (field: string, value: any) => {\n    setNoteData((prev) => ({ ...prev, [field]: value }))\n  }\n\n  const addTag = () => {\n    if (newTag.trim() && !noteData.tags.includes(newTag.trim())) {\n      updateField('tags', [...noteData.tags, newTag.trim()])\n      setNewTag('')\n    }\n  }\n\n  const removeTag = (tagToRemove: string) => {\n    updateField(\n      'tags',\n      noteData.tags.filter((tag) => tag !== tagToRemove)\n    )\n  }\n\n  const handleSubmit = () => {\n    alert('Note saved! (In a real app, this would save to a server)')\n    removeNoteData()\n  }\n\n  const isEmpty =\n    !noteData.title && !noteData.content && noteData.tags.length === 0\n\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"bg-muted/30 rounded-md p-4 shadow-sm\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <h3 className=\"text-lg font-semibold\">Session Note Draft</h3>\n          <div className=\"flex items-center gap-2\">\n            {!isEmpty && (\n              <Badge variant=\"outline\">\n                <Save className=\"h-3 w-3 mr-1\" />\n                Session-saved\n              </Badge>\n            )}\n          </div>\n        </div>\n\n        <div className=\"space-y-4\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"title\">Note Title</Label>\n            <Input\n              id=\"title\"\n              value={noteData.title}\n              onChange={(e) => updateField('title', e.target.value)}\n              placeholder=\"Enter note title...\"\n            />\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"content\">Note Content</Label>\n            <Textarea\n              id=\"content\"\n              value={noteData.content}\n              onChange={(e) => updateField('content', e.target.value)}\n              placeholder=\"Write your note here...\"\n              rows={6}\n            />\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label>Tags</Label>\n            <div className=\"flex gap-2\">\n              <Input\n                value={newTag}\n                onChange={(e) => setNewTag(e.target.value)}\n                placeholder=\"Add tag...\"\n                onKeyUp={(e) => e.key === 'Enter' && addTag()}\n                className=\"flex-1\"\n              />\n              <Button onClick={addTag} size=\"sm\" disabled={!newTag.trim()}>\n                Add\n              </Button>\n            </div>\n            {noteData.tags.length > 0 && (\n              <div className=\"flex flex-wrap gap-2 mt-2\">\n                {noteData.tags.map((tag) => (\n                  <Badge\n                    key={tag}\n                    variant=\"secondary\"\n                    className=\"cursor-pointer hover:bg-destructive hover:text-destructive-foreground\"\n                    onClick={() => removeTag(tag)}\n                  >\n                    {tag} ×\n                  </Badge>\n                ))}\n              </div>\n            )}\n          </div>\n        </div>\n\n        <div className=\"flex gap-2 mt-6\">\n          <Button onClick={handleSubmit} disabled={isEmpty}>\n            Save Note\n          </Button>\n          <Button onClick={removeNoteData} variant=\"outline\" disabled={isEmpty}>\n            <Trash2 className=\"h-4 w-4 mr-1\" />\n            Clear Draft\n          </Button>\n        </div>\n      </div>\n\n      <div className=\"text-sm p-2 bg-muted/30 text-muted-foreground rounded border\">\n        <code className=\"font-mono text-xs\">\n          Auto-saves note draft in session - close tab to clear!\n        </code>\n      </div>\n    </div>\n  )\n}\n",
    "dependencies": []
  },
  "use-session-storage-4": {
    "component": () => import('../registry/examples/hooks-example/UseSessionStorageExamples/AdvancedExample').then(mod => mod.AdvancedExample),
    "source": "'use client'\n\nimport { Button } from '@/components/ui/button'\nimport { useSessionStorage } from '@/registry/hooks/use-session-storage'\n\n// Example 4: Session-based analytics tracking\nexport const AdvancedExample = () => {\n  type AnalyticsEvent = {\n    id: number\n    type: string\n    timestamp: Date\n  }\n\n  const [analytics, setAnalytics, removeAnalytics] = useSessionStorage<\n    AnalyticsEvent[]\n  >('session-analytics', [], {\n    serializer: (events: AnalyticsEvent[]) =>\n      JSON.stringify(\n        events.map((event) => ({\n          ...event,\n          timestamp: event.timestamp.toISOString(),\n        }))\n      ),\n    deserializer: (data: string) =>\n      JSON.parse(data).map((event: any) => ({\n        ...event,\n        timestamp: new Date(event.timestamp),\n      })),\n  })\n\n  const addEvent = (type: string) => {\n    const newEvent = {\n      id: Date.now(),\n      type,\n      timestamp: new Date(),\n    }\n    setAnalytics([...analytics, newEvent])\n  }\n\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"bg-muted/30 rounded-md p-4 shadow-sm\">\n        <h3 className=\"text-lg font-semibold mb-4\">Session Analytics</h3>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n          <div className=\"space-y-3\">\n            <h4 className=\"font-medium\">Track Session Events</h4>\n            <div className=\"p-3 bg-muted/50 rounded\">\n              <div className=\"text-sm text-muted-foreground\">\n                Total Events: {analytics.length}\n              </div>\n              <div className=\"flex gap-2 mt-2\">\n                <Button onClick={() => addEvent('page_view')} size=\"sm\">\n                  Log Page View\n                </Button>\n                <Button onClick={() => addEvent('click')} size=\"sm\">\n                  Log Click\n                </Button>\n                <Button\n                  onClick={removeAnalytics}\n                  variant=\"outline\"\n                  size=\"sm\"\n                  disabled={analytics.length === 0}\n                >\n                  Clear Events\n                </Button>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {analytics.length > 0 && (\n          <div className=\"mt-4\">\n            <h5 className=\"font-medium mb-2\">Session Events:</h5>\n            <div className=\"space-y-2 max-h-40 overflow-y-auto\">\n              {analytics.map((event) => (\n                <div\n                  key={event.id}\n                  className=\"flex justify-between items-center p-2 bg-background rounded border text-sm\"\n                >\n                  <span>{event.type}</span>\n                  <span className=\"font-mono\">\n                    {event.timestamp.toLocaleString()}\n                  </span>\n                </div>\n              ))}\n            </div>\n          </div>\n        )}\n      </div>\n\n      <div className=\"text-sm p-2 bg-muted/30 text-muted-foreground rounded border\">\n        <code className=\"font-mono text-xs\">\n          Tracks session events with custom serialization\n        </code>\n      </div>\n    </div>\n  )\n}\n",
    "dependencies": []
  }
};
    