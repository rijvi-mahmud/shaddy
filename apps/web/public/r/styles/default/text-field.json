{
  "$schema": "",
  "name": "text-field",
  "type": "registry:component",
  "author": "shaddy (https://shaddy-docs.vercel.app/)",
  "dependencies": [],
  "devDependencies": [],
  "registryDependencies": [
    "http://localhost:3000/r/shaddy-form",
    "http://localhost:3000/r/loading-spinner"
  ],
  "files": [
    {
      "path": "form/fields/text-field.tsx",
      "content": "import { Button } from '@/components/ui/button'\nimport { cn } from '@/lib/utils'\nimport { X } from 'lucide-react'\nimport { ReactNode } from 'react'\nimport { FieldValues, Path, useFormContext } from 'react-hook-form'\nimport {\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from '@/components/ui/form'\nimport { Input } from '@/components/ui/input'\nimport { LoadingSpinner } from '@/registry/default/ui/loading-spinner'\n\ntype TextFieldProps<T extends FieldValues> = {\n  name: Path<T>\n  label?: string\n  type?: 'text' | 'email' | 'number'\n  placeholder?: string\n  required?: boolean\n  action?: () => void\n  icon?: ReactNode\n  loading?: boolean\n  className?: string\n  inputClass?: string\n  disabled?: boolean\n  iconClass?: string\n}\n\n/**\n * A text field component.\n * @param name The name of the field.\n * @param label The label of the field.\n * @param type The type of the field.\n * @param placeholder The placeholder of the field.\n * @param required If the field is required.\n * @param action The action to be performed on the field.\n * @param icon The icon of the field.\n * @param loading If the field is loading.\n * @param className The class name of the\n * @param inputClass The class name of the input.\n * @param iconClass The class name of the\n * @param disabled If the field is disabled.\n *\n * @returns The text field component.\n *\n * @example\n * ```tsx\n * <TextField name=\"name\" label=\"Name\" />\n * ```\n */\n\nexport const TextField = <T extends FieldValues>({\n  name,\n  label,\n  type = 'text',\n  placeholder = 'Input',\n  required = false,\n  action,\n  icon,\n  loading,\n  className,\n  inputClass,\n  iconClass,\n  disabled = false,\n}: TextFieldProps<T>) => {\n  const { control } = useFormContext<T>()\n  return (\n    <FormField\n      control={control}\n      name={name}\n      render={({ field }) => (\n        <FormItem className={cn(className)}>\n          {label && (\n            <FormLabel htmlFor={name}>\n              <span>{label}</span>\n              {required && <span className=\"ml-1 text-red-500\">*</span>}\n            </FormLabel>\n          )}\n          <FormControl>\n            <div className=\"relative flex items-center gap-2\">\n              <Input\n                {...field}\n                type={type}\n                placeholder={placeholder ?? 'Enter a value'}\n                className={cn(`w-full ${inputClass}`, action && 'pr-12')}\n                id={name}\n                disabled={disabled}\n              />\n\n              {loading && <LoadingSpinner className=\"absolute right-4\" />}\n\n              {action && (\n                <Button\n                  variant={'ghost'}\n                  size={'sm'}\n                  onClick={action}\n                  type=\"button\"\n                  className={cn('absolute right-0.5 top-0.5', iconClass)}\n                >\n                  {icon ? icon : <X className=\"h-4 w-4 text-red-500\" />}\n                </Button>\n              )}\n\n              {!action && icon && (\n                <div className={cn('absolute right-2 top-3', iconClass)}>\n                  {icon}\n                </div>\n              )}\n            </div>\n          </FormControl>\n\n          <FormMessage className=\"line-clamp-1 text-xs\" />\n        </FormItem>\n      )}\n    />\n  )\n}\n\nTextField.displayName = 'TextField'\n",
      "type": "registry:component",
      "target": "components/form/fields/text-field.tsx"
    }
  ]
}
