{
  "$schema": "",
  "name": "autosize-textarea",
  "type": "registry:ui",
  "author": "shaddy (https://shaddy-docs.vercel.app/)",
  "dependencies": ["lucide-react"],
  "devDependencies": [],
  "registryDependencies": ["textarea"],
  "files": [
    {
      "path": "ui/autosize-textarea.tsx",
      "content": "'use client'\nimport * as React from 'react'\nimport { cn } from '@/lib/utils'\nimport { useImperativeHandle } from 'react'\nimport { Textarea } from '@/components/ui/textarea'\n\ninterface UseAutosizeTextAreaProps {\n  textAreaRef: React.MutableRefObject<HTMLTextAreaElement | null>\n  minHeight?: number\n  maxHeight?: number\n  triggerAutoSize: string\n}\n\nexport const useAutosizeTextArea = ({\n  textAreaRef,\n  triggerAutoSize,\n  maxHeight = Number.MAX_SAFE_INTEGER,\n  minHeight = 0,\n}: UseAutosizeTextAreaProps) => {\n  const [init, setInit] = React.useState(true)\n  React.useEffect(() => {\n    // We need to reset the height momentarily to get the correct scrollHeight for the textarea\n    const offsetBorder = 6\n    const textAreaElement = textAreaRef.current\n    if (textAreaElement) {\n      if (init) {\n        textAreaElement.style.minHeight = `${minHeight + offsetBorder}px`\n        if (maxHeight > minHeight) {\n          textAreaElement.style.maxHeight = `${maxHeight}px`\n        }\n        setInit(false)\n      }\n      textAreaElement.style.height = `${minHeight + offsetBorder}px`\n      const scrollHeight = textAreaElement.scrollHeight\n      // We then set the height directly, outside of the render loop\n      // Trying to set this with state or a ref will product an incorrect value.\n      if (scrollHeight > maxHeight) {\n        textAreaElement.style.height = `${maxHeight}px`\n      } else {\n        textAreaElement.style.height = `${scrollHeight + offsetBorder}px`\n      }\n    }\n  }, [textAreaRef.current, triggerAutoSize])\n}\n\nexport type AutosizeTextAreaRef = {\n  textArea: HTMLTextAreaElement\n  maxHeight: number\n  minHeight: number\n}\n\ntype AutosizeTextAreaProps = {\n  maxHeight?: number\n  minHeight?: number\n} & React.TextareaHTMLAttributes<HTMLTextAreaElement>\n\nexport const AutosizeTextarea = React.forwardRef<\n  AutosizeTextAreaRef,\n  AutosizeTextAreaProps\n>(\n  (\n    {\n      maxHeight = Number.MAX_SAFE_INTEGER,\n      minHeight = 52,\n      className,\n      onChange,\n      value,\n      ...props\n    }: AutosizeTextAreaProps,\n    ref: React.Ref<AutosizeTextAreaRef>\n  ) => {\n    const textAreaRef = React.useRef<HTMLTextAreaElement | null>(null)\n    const [triggerAutoSize, setTriggerAutoSize] = React.useState('')\n\n    useAutosizeTextArea({\n      textAreaRef,\n      triggerAutoSize: triggerAutoSize,\n      maxHeight,\n      minHeight,\n    })\n\n    useImperativeHandle(ref, () => ({\n      textArea: textAreaRef.current as HTMLTextAreaElement,\n      focus: () => textAreaRef?.current?.focus(),\n      maxHeight,\n      minHeight,\n    }))\n\n    React.useEffect(() => {\n      setTriggerAutoSize(value as string)\n    }, [props?.defaultValue, value])\n\n    return (\n      <Textarea\n        {...props}\n        value={value}\n        ref={textAreaRef}\n        className={cn(\n          'flex w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50',\n          className\n        )}\n        onChange={(e) => {\n          setTriggerAutoSize(e.target.value)\n          onChange?.(e)\n        }}\n      />\n    )\n  }\n)\nAutosizeTextarea.displayName = 'AutosizeTextarea'\n",
      "type": "registry:ui",
      "target": "components/ui/autosize-textarea.tsx"
    }
  ]
}
