{
  "$schema": "",
  "name": "use-debounced-callback-example",
  "type": "registry:example",
  "author": "shaddy (https://shaddy-docs.vercel.app/)",
  "dependencies": [],
  "devDependencies": [],
  "registryDependencies": [],
  "files": [
    {
      "path": "examples/hooks/use-debounced-callback-example.tsx",
      "content": "'use client'\n\nimport { useEffect, useReducer } from 'react'\nimport { Card, CardContent } from '@/components/ui/card'\nimport { Input } from '@/components/ui/input'\nimport { Slider } from '@/components/ui/slider'\nimport { useDebouncedCallback } from '@/registry/default/hooks/use-debounced-callback'\nimport { Clock, AlertTriangle, Settings } from 'lucide-react'\nimport { Checkbox } from '@/components/ui/checkbox'\nimport { Label } from '@/components/ui/label'\nimport { Button } from '@/components/ui/button'\nimport { Badge } from '@/components/ui/badge'\n\n/** State interface */\ninterface State {\n  /** Input values */\n  input: {\n    value: string\n    immediate: string\n    debounced: string\n  }\n  /** Debounce configuration */\n  config: {\n    delay: number\n    leading: boolean\n    trailing: boolean\n    maxWait: number | null\n  }\n  /** Status */\n  status: {\n    isPending: boolean\n    lastUpdated: Date | null\n  }\n  /** UI state */\n  ui: {\n    activeExample: string\n  }\n}\n\n/** Action types */\ntype Action =\n  | { type: 'SET_INPUT_VALUE'; payload: string }\n  | { type: 'SET_DEBOUNCED_VALUE'; payload: string }\n  | { type: 'UPDATE_CONFIG'; payload: Partial<State['config']> }\n  | { type: 'SET_PENDING'; payload: boolean }\n  | { type: 'SET_LAST_UPDATED'; payload: Date }\n  | { type: 'APPLY_EXAMPLE'; payload: string }\n\n/** Example presets */\nconst EXAMPLES = {\n  default: {\n    title: 'Default',\n    leading: false,\n    trailing: true,\n    maxWait: null,\n    delay: 500,\n  },\n  leading: {\n    title: 'Leading',\n    leading: true,\n    trailing: false,\n    maxWait: null,\n    delay: 500,\n  },\n  both: {\n    title: 'Both',\n    leading: true,\n    trailing: true,\n    maxWait: null,\n    delay: 500,\n  },\n  maxWait: {\n    title: 'Max Wait',\n    leading: false,\n    trailing: true,\n    maxWait: 1500,\n    delay: 500,\n  },\n  fast: {\n    title: 'Fast',\n    leading: false,\n    trailing: true,\n    maxWait: null,\n    delay: 200,\n  },\n}\n\n/** Initial state */\nconst initialState: State = {\n  input: {\n    value: '',\n    immediate: '',\n    debounced: '',\n  },\n  config: {\n    delay: 500,\n    leading: false,\n    trailing: true,\n    maxWait: null,\n  },\n  status: {\n    isPending: false,\n    lastUpdated: null,\n  },\n  ui: {\n    activeExample: 'default',\n  },\n}\n\n/** Reducer function */\nfunction reducer(state: State, action: Action): State {\n  switch (action.type) {\n    case 'SET_INPUT_VALUE':\n      return {\n        ...state,\n        input: {\n          ...state.input,\n          value: action.payload,\n          immediate: action.payload,\n        },\n      }\n    case 'SET_DEBOUNCED_VALUE':\n      return {\n        ...state,\n        input: {\n          ...state.input,\n          debounced: action.payload,\n        },\n      }\n    case 'UPDATE_CONFIG':\n      return {\n        ...state,\n        config: {\n          ...state.config,\n          ...action.payload,\n        },\n      }\n    case 'SET_PENDING':\n      return {\n        ...state,\n        status: {\n          ...state.status,\n          isPending: action.payload,\n        },\n      }\n    case 'SET_LAST_UPDATED':\n      return {\n        ...state,\n        status: {\n          ...state.status,\n          lastUpdated: action.payload,\n        },\n      }\n    case 'APPLY_EXAMPLE': {\n      const example = EXAMPLES[action.payload as keyof typeof EXAMPLES]\n      return {\n        ...state,\n        config: {\n          delay: example.delay,\n          leading: example.leading,\n          trailing: example.trailing,\n          maxWait: example.maxWait,\n        },\n        ui: {\n          ...state.ui,\n          activeExample: action.payload,\n        },\n      }\n    }\n    default:\n      return state\n  }\n}\n\nconst UseDebouncedCallbackExample = () => {\n  const [state, dispatch] = useReducer(reducer, initialState)\n  const { input, config, status, ui } = state\n\n  /** Handle input change */\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    dispatch({ type: 'SET_INPUT_VALUE', payload: e.target.value })\n  }\n\n  /** Create debounced callback */\n  const debouncedCallback = useDebouncedCallback(\n    (value: string) => {\n      dispatch({ type: 'SET_DEBOUNCED_VALUE', payload: value })\n      dispatch({ type: 'SET_LAST_UPDATED', payload: new Date() })\n      dispatch({ type: 'SET_PENDING', payload: false })\n    },\n    config.delay,\n    {\n      leading: config.leading,\n      trailing: config.trailing,\n      maxWait: config.maxWait || undefined,\n    }\n  )\n\n  /** Apply example preset */\n  const applyExample = (exampleKey: keyof typeof EXAMPLES) => {\n    dispatch({ type: 'APPLY_EXAMPLE', payload: exampleKey })\n  }\n\n  /** Call debounced function when input changes */\n  useEffect(() => {\n    debouncedCallback(input.value)\n    dispatch({ type: 'SET_PENDING', payload: debouncedCallback.isPending() })\n  }, [input.value, debouncedCallback])\n\n  /** Update pending status periodically */\n  useEffect(() => {\n    const interval = setInterval(() => {\n      dispatch({ type: 'SET_PENDING', payload: debouncedCallback.isPending() })\n    }, 100)\n    return () => clearInterval(interval)\n  }, [debouncedCallback])\n\n  return (\n    <div className=\"max-w-4xl mx-auto space-y-4\">\n      <Card className=\"shadow-sm\">\n        <CardContent className=\"p-6 space-y-5\">\n          {/* Input */}\n          <div className=\"space-y-3\">\n            <div className=\"flex items-center justify-between\">\n              <Label className=\"text-base font-medium\">Input Field</Label>\n              <Badge\n                variant=\"outline\"\n                className={`px-3 py-1 text-sm transition-colors ${\n                  status.isPending\n                    ? 'bg-amber-100 text-amber-800 border-amber-300 animate-pulse dark:bg-amber-900/30 dark:text-amber-400 dark:border-amber-800'\n                    : 'bg-green-100 text-green-800 border-green-300 dark:bg-green-900/30 dark:text-green-400 dark:border-green-800'\n                }`}\n              >\n                {status.isPending ? (\n                  <>\n                    <AlertTriangle className=\"h-4 w-4 mr-2 text-amber-500 dark:text-amber-400\" />\n                    Pending\n                  </>\n                ) : (\n                  <>\n                    <div className=\"h-4 w-4 mr-2 rounded-full bg-green-500 dark:bg-green-400\" />\n                    Idle\n                  </>\n                )}\n              </Badge>\n            </div>\n            <Input\n              value={input.value}\n              onChange={handleInputChange}\n              placeholder=\"Start typing...\"\n              className={`h-10 text-base ${status.isPending ? 'border-amber-300 dark:border-amber-800' : ''}`}\n            />\n          </div>\n\n          {/* Quick Examples */}\n          <div className=\"space-y-3 pt-2\">\n            <Label className=\"text-base font-medium flex items-center gap-2\">\n              <Settings className=\"h-4 w-4\" />\n              Presets\n            </Label>\n            <div className=\"flex gap-2 flex-wrap\">\n              {Object.entries(EXAMPLES).map(([key, example]) => (\n                <Button\n                  key={key}\n                  variant={ui.activeExample === key ? 'default' : 'outline'}\n                  size=\"default\"\n                  onClick={() => applyExample(key as keyof typeof EXAMPLES)}\n                  className=\"h-9\"\n                >\n                  {example.title}\n                </Button>\n              ))}\n            </div>\n          </div>\n\n          {/* Controls */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 pt-2\">\n            <div className=\"space-y-3\">\n              <div className=\"flex justify-between items-center\">\n                <Label className=\"text-sm font-medium\">Delay</Label>\n                <span className=\"text-sm text-muted-foreground font-mono\">\n                  {config.delay}ms\n                </span>\n              </div>\n              <Slider\n                value={[config.delay]}\n                min={100}\n                max={2000}\n                step={100}\n                onValueChange={(values) =>\n                  dispatch({\n                    type: 'UPDATE_CONFIG',\n                    payload: { delay: values[0] },\n                  })\n                }\n                className=\"py-2\"\n              />\n            </div>\n            <div className=\"space-y-3\">\n              <div className=\"flex justify-between items-center\">\n                <Label className=\"text-sm font-medium\">Max Wait</Label>\n                <span className=\"text-sm text-muted-foreground font-mono\">\n                  {config.maxWait || 'None'}\n                </span>\n              </div>\n              <Slider\n                value={[config.maxWait || 0]}\n                min={0}\n                max={5000}\n                step={500}\n                onValueChange={(values) =>\n                  dispatch({\n                    type: 'UPDATE_CONFIG',\n                    payload: { maxWait: values[0] === 0 ? null : values[0] },\n                  })\n                }\n                className=\"py-2\"\n              />\n            </div>\n          </div>\n\n          {/* Edge Options */}\n          <div className=\"flex flex-col sm:flex-row sm:items-center gap-4 pt-2\">\n            <div className=\"flex items-center space-x-2\">\n              <Checkbox\n                id=\"leading\"\n                checked={config.leading}\n                onCheckedChange={(checked) =>\n                  dispatch({\n                    type: 'UPDATE_CONFIG',\n                    payload: { leading: checked === true },\n                  })\n                }\n                className=\"h-5 w-5\"\n              />\n              <Label htmlFor=\"leading\" className=\"text-sm font-medium\">\n                Leading Edge\n              </Label>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <Checkbox\n                id=\"trailing\"\n                checked={config.trailing}\n                onCheckedChange={(checked) =>\n                  dispatch({\n                    type: 'UPDATE_CONFIG',\n                    payload: { trailing: checked === true },\n                  })\n                }\n                className=\"h-5 w-5\"\n              />\n              <Label htmlFor=\"trailing\" className=\"text-sm font-medium\">\n                Trailing Edge\n              </Label>\n            </div>\n            <div className=\"flex gap-2 sm:ml-auto mt-2 sm:mt-0\">\n              <Button\n                variant=\"outline\"\n                onClick={() => debouncedCallback.cancel()}\n              >\n                Cancel\n              </Button>\n              <Button\n                variant=\"outline\"\n                onClick={() => {\n                  debouncedCallback.flush()\n                  dispatch({ type: 'SET_PENDING', payload: false })\n                }}\n              >\n                Flush\n              </Button>\n            </div>\n          </div>\n\n          {/* Results */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-5 pt-2 mt-4 border-t\">\n            <div className=\"space-y-2\">\n              <div className=\"flex items-center gap-2\">\n                <div className=\"h-3 w-3 rounded-full bg-green-500\" />\n                <Label className=\"text-sm font-medium\">Immediate Value</Label>\n              </div>\n              <div className=\"p-3 bg-muted/50 rounded-md text-base font-mono min-h-[48px] flex items-center\">\n                {input.immediate || (\n                  <span className=\"text-muted-foreground text-sm italic\">\n                    Empty\n                  </span>\n                )}\n              </div>\n            </div>\n            <div className=\"space-y-2\">\n              <div className=\"flex items-center gap-2\">\n                <div className=\"h-3 w-3 rounded-full bg-blue-500\" />\n                <Label className=\"text-sm font-medium\">Debounced Value</Label>\n              </div>\n              <div className=\"p-3 bg-muted/50 rounded-md text-base font-mono min-h-[48px] flex items-center\">\n                {input.debounced || (\n                  <span className=\"text-muted-foreground text-sm italic\">\n                    Empty\n                  </span>\n                )}\n              </div>\n            </div>\n          </div>\n\n          {/* Last Updated */}\n          {status.lastUpdated && (\n            <div className=\"flex items-center justify-center gap-2 text-sm text-muted-foreground pt-3 mt-2 border-t\">\n              <Clock className=\"h-4 w-4\" />\n              <span>\n                Last update:{' '}\n                {status.lastUpdated.toLocaleTimeString([], { hour12: false })}\n              </span>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  )\n}\n\nexport default UseDebouncedCallbackExample\n",
      "type": "registry:example",
      "target": "components/use-debounced-callback-example.tsx"
    }
  ]
}
