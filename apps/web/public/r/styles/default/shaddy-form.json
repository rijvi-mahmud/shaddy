{
  "$schema": "",
  "name": "shaddy-form",
  "type": "registry:component",
  "author": "shaddy (https://shaddy-docs.vercel.app/)",
  "dependencies": [],
  "devDependencies": [],
  "registryDependencies": [
    "form",
    "input",
    "button",
    "http://localhost:3000/r/text-field",
    "http://localhost:3000/r/submit-button"
  ],
  "files": [
    {
      "path": "form/shaddy-form.tsx",
      "content": "import { Form } from '@/components/ui/form'\nimport { zodResolver } from '@hookform/resolvers/zod'\nimport { ReactNode, forwardRef, useImperativeHandle } from 'react'\nimport {\n  DefaultValues,\n  FieldValues,\n  SubmitHandler,\n  useForm,\n  UseFormReturn,\n} from 'react-hook-form'\nimport { ZodType } from 'zod'\n\nexport type ShaddyFormRef<T extends FieldValues = FieldValues> = {\n  form: UseFormReturn<T, any, T>\n}\n\nexport type ShaddyFormProps<TSchema extends FieldValues = FieldValues> = {\n  schema: ZodType<TSchema, any>\n  initialValues: DefaultValues<TSchema>\n  onSubmit: SubmitHandler<TSchema>\n  children: ReactNode\n  mode?: 'onChange' | 'onBlur' | 'onSubmit' | 'all'\n} & Omit<React.ComponentPropsWithoutRef<'form'>, 'onSubmit'>\n\n/**\n * A generic form component.\n * @param schema The schema of the form.\n * @param initialValues The initial values of the form.\n * @param onSubmit The submit handler of the form.\n * @param children The children of the form.\n * @param ref The reference of the form.\n *\n * @returns The generic form component.\n */\nconst ShaddyFormInner = forwardRef(\n  <TSchema extends FieldValues = any>(\n    {\n      initialValues,\n      schema,\n      onSubmit,\n      children,\n      mode = 'onChange',\n      ...props\n    }: ShaddyFormProps<TSchema>,\n    ref: React.Ref<ShaddyFormRef<TSchema>>\n  ) => {\n    const form = useForm<TSchema>({\n      defaultValues: initialValues,\n      resolver: zodResolver(schema),\n      mode,\n    })\n\n    useImperativeHandle(ref, () => ({ form }))\n\n    return (\n      <Form {...form}>\n        <form onSubmit={form.handleSubmit(onSubmit)} {...props}>\n          {children}\n        </form>\n      </Form>\n    )\n  }\n)\n\nShaddyFormInner.displayName = 'ShaddyForm'\n\nexport const ShaddyForm = ShaddyFormInner as <\n  TSchema extends FieldValues = any,\n>(\n  props: ShaddyFormProps<TSchema> & { ref?: React.Ref<ShaddyFormRef<TSchema>> }\n) => JSX.Element\n",
      "type": "registry:component",
      "target": "components/form/shaddy-form.tsx"
    }
  ]
}
