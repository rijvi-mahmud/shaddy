{
  "$schema": "",
  "name": "use-debounce",
  "type": "registry:hook",
  "author": "shaddy (https://shaddy-docs.vercel.app/)",
  "dependencies": [],
  "devDependencies": [],
  "registryDependencies": [],
  "files": [
    {
      "path": "hooks/use-debounce.ts",
      "content": "import { useEffect, useState } from 'react'\n\n/**\n * Custom hook to debounce a value. This is useful for delaying updates to a value until after a specified delay.\n *\n * @template T - The type of the value to debounce.\n * @param {T} value - The value to debounce.\n * @param {number} delay - The delay in milliseconds before updating the debounced value.\n * @returns {T} - The debounced value.\n *\n * @example\n * const debouncedValue = useDebounce(value, 500);\n * This will delay the update of `debouncedValue` by 500ms after `value` changes.\n */\n\nexport const useDebounce = <T = any>(value: T, delay: number): T => {\n  const [debouncedValue, setDebouncedValue] = useState<T>(value)\n\n  useEffect(() => {\n    const t = setTimeout(\n      () => {\n        setDebouncedValue(value)\n      },\n      Math.max(0, delay)\n    )\n\n    return () => {\n      clearTimeout(t)\n    }\n  }, [value, delay])\n\n  return debouncedValue\n}\n",
      "type": "registry:hook",
      "target": "hooks/use-debounce.ts"
    }
  ]
}
