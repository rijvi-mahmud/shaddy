{
  "$schema": "",
  "name": "use-default",
  "type": "registry:hook",
  "author": "shaddy (https://shaddy-docs.vercel.app/)",
  "dependencies": [],
  "devDependencies": [],
  "registryDependencies": [],
  "files": [
    {
      "path": "hooks/use-default.ts",
      "content": "import { useState } from 'react'\n\n/**\n * A type alias representing a value that can be of type T, null, or undefined.\n */\ntype Nullable<T> = T | null | undefined\n\n/**\n * A custom hook that manages a stateful value with a default fallback.\n *\n * @template T - The type of the value being managed.\n * @param {T} initialValue - The initial value of the state.\n * @param {T} defaultValue - The default value to fall back to when the state is null or undefined.\n * @returns {[T, (newValue: Nullable<T>) => void]} - A tuple containing the current value and a setter function.\n */\n\nexport const useDefault = <T = any>(\n  initialValue: T,\n  defaultValue: T\n): [T, (newValue: Nullable<T>) => void] => {\n  const [value, setValue] = useState<Nullable<T>>(initialValue)\n\n  /**\n   * Sets the state to a new value or falls back to the default value if the new value is null or undefined.\n   *\n   * @param {Nullable<T>} newValue - The new value to set, or null/undefined to reset to the default value.\n   */\n  const setValueWithDefault = (newValue: Nullable<T>) => {\n    setValue(newValue ?? defaultValue)\n  }\n\n  return [value, setValueWithDefault] as [T, (newValue: Nullable<T>) => void]\n}\n",
      "type": "registry:hook",
      "target": "hooks/use-default.ts"
    }
  ]
}
