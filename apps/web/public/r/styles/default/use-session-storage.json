{
  "$schema": "",
  "name": "use-session-storage",
  "type": "registry:hook",
  "author": "shaddy (https://shaddy-docs.vercel.app/)",
  "dependencies": [],
  "devDependencies": [],
  "registryDependencies": [],
  "files": [
    {
      "path": "hooks/use-session-storage.ts",
      "content": "import {\n  useCallback,\n  useState,\n  type Dispatch,\n  type SetStateAction,\n} from 'react'\nimport { useEventListener } from '@/registry/default/hooks/use-event-listener'\n\ntype UseSessionStorageOptions<T> = {\n  serializer?: (value: T) => string\n  deserializer?: (value: string) => T\n  initializeWithValue?: boolean\n  onError?: (error: Error, key: string) => void\n}\n\n/**\n * Hook to manage a value in sessionStorage with optional serialization and deserialization.\n *\n * @template T - The type of the value to store.\n * @param {string} key - The key to store the value under in sessionStorage.\n * @param {T | (() => T)} [initialValue] - The initial value or a function to compute it.\n * @param {UseSessionStorageOptions<T>} [options] - Optional configuration for serialization, deserialization, and initialization.\n * @returns {[T, Dispatch<SetStateAction<T>>, () => void]} - The stored value, a setter function, and a remover function.\n */\nexport function useSessionStorage<T>(\n  key: string,\n  initialValue: T | (() => T) = undefined as T,\n  options: UseSessionStorageOptions<T> = {}\n): [T, Dispatch<SetStateAction<T>>, () => void] {\n  const {\n    initializeWithValue = true,\n    serializer = JSON.stringify,\n    deserializer = JSON.parse,\n    onError = (error, key) =>\n      console.warn(`Error with sessionStorage key \"${key}\": ${error.message}`),\n  } = options\n\n  const isSessionStorageAvailable = useCallback((): boolean => {\n    return typeof window !== 'undefined' && !!window.sessionStorage\n  }, [])\n\n  const getInitialValue = useCallback((): T => {\n    if (typeof initialValue === 'function') {\n      return (initialValue as () => T)()\n    }\n    return initialValue\n  }, [initialValue])\n\n  const readValueFromStorage = useCallback((): T => {\n    if (!isSessionStorageAvailable()) {\n      return getInitialValue()\n    }\n    try {\n      const storedItem = window.sessionStorage.getItem(key)\n      if (storedItem === null) {\n        return getInitialValue()\n      }\n      return deserializer(storedItem)\n    } catch (error) {\n      const errorObj =\n        error instanceof Error ? error : new Error('Unknown error')\n      onError(errorObj, key)\n      return getInitialValue()\n    }\n  }, [key, deserializer, onError, isSessionStorageAvailable, getInitialValue])\n\n  const [storedValue, setStoredValue] = useState<T>(() => {\n    if (initializeWithValue) {\n      return readValueFromStorage()\n    }\n    return getInitialValue()\n  })\n\n  const setValue: Dispatch<SetStateAction<T>> = useCallback(\n    (value) => {\n      if (!isSessionStorageAvailable()) {\n        onError(new Error('sessionStorage not available'), key)\n        return\n      }\n      try {\n        const newValue =\n          typeof value === 'function'\n            ? (value as (prev: T) => T)(storedValue)\n            : value\n        window.sessionStorage.setItem(key, serializer(newValue))\n        setStoredValue(newValue)\n      } catch (error) {\n        const errorObj =\n          error instanceof Error ? error : new Error('Unknown error')\n        onError(errorObj, key)\n      }\n    },\n    [key, storedValue, serializer, onError, isSessionStorageAvailable]\n  )\n\n  const removeValue = useCallback(() => {\n    if (isSessionStorageAvailable()) {\n      window.sessionStorage.removeItem(key)\n    }\n    setStoredValue(getInitialValue())\n  }, [key, isSessionStorageAvailable, getInitialValue])\n\n  const handleStorageChange = useCallback(\n    (event: StorageEvent) => {\n      if (event.key === key) {\n        setStoredValue(readValueFromStorage())\n      }\n    },\n    [key, readValueFromStorage]\n  )\n\n  useEventListener(\n    'storage',\n    handleStorageChange,\n    typeof window !== 'undefined' ? window : null\n  )\n\n  return [storedValue, setValue, removeValue]\n}\n",
      "type": "registry:hook",
      "target": "hooks/use-session-storage.ts"
    }
  ]
}
