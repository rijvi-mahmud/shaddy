{
  "$schema": "",
  "name": "use-debounce-example",
  "type": "registry:example",
  "author": "shaddy (https://shaddy-docs.vercel.app/)",
  "dependencies": [],
  "devDependencies": [],
  "registryDependencies": [],
  "files": [
    {
      "path": "examples/hooks/use-debounce-example.tsx",
      "content": "'use client'\n\nimport { useState, useEffect } from 'react'\nimport { Card, CardContent, CardHeader } from '@/components/ui/card'\nimport { Input } from '@/components/ui/input'\nimport { Badge } from '@/components/ui/badge'\nimport { Clock, Search, Loader2, Minus, Plus } from 'lucide-react'\nimport { Button } from '@/components/ui/button'\nimport { useDebounce } from '@/registry/default/hooks/use-debounce'\n\nconst UseDebounceExample = () => {\n  const [inputValue, setInputValue] = useState('')\n  const [results, setResults] = useState<string[]>([])\n  const [isSearching, setIsSearching] = useState(false)\n  const [delay, setDelay] = useState(500)\n\n  // Debounce the input value with the selected delay\n  const debouncedValue = useDebounce(inputValue, delay)\n\n  // This effect simulates an API call whenever the debounced value changes\n  useEffect(() => {\n    // Only search if there's a value\n    if (!debouncedValue) {\n      setResults([])\n      return\n    }\n\n    const fetchResults = async () => {\n      setIsSearching(true)\n      // Simulate API call with timeout\n      await new Promise((resolve) => setTimeout(resolve, 500))\n      setResults([\n        `Result for \"\\${debouncedValue}\" - Item 1`,\n        `Result for \"\\${debouncedValue}\" - Item 2`,\n        `Result for \"\\${debouncedValue}\" - Item 3`,\n      ])\n      setIsSearching(false)\n    }\n\n    fetchResults()\n  }, [debouncedValue])\n\n  return (\n    <Card className=\"mx-auto max-w-md w-full\">\n      <CardHeader className=\"pb-2\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center gap-2\">\n            <h3 className=\"text-sm font-semibold\">Debounce Search</h3>\n            <Badge variant=\"secondary\" className=\"text-xs px-2 py-0.5\">\n              <Clock className=\"h-3 w-3 mr-1\" />\n              {delay}ms\n            </Badge>\n          </div>\n          <div className=\"flex items-center gap-1\">\n            <Button\n              onClick={() => setDelay(Math.max(100, delay - 100))}\n              variant=\"outline\"\n              size=\"sm\"\n              className=\"h-6 w-6 p-0\"\n            >\n              <Minus className=\"h-3 w-3\" />\n            </Button>\n            <Button\n              onClick={() => setDelay(delay + 100)}\n              variant=\"outline\"\n              size=\"sm\"\n              className=\"h-6 w-6 p-0\"\n            >\n              <Plus className=\"h-3 w-3\" />\n            </Button>\n          </div>\n        </div>\n      </CardHeader>\n\n      <CardContent className=\"space-y-3\">\n        <div className=\"relative\">\n          <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n          <Input\n            value={inputValue}\n            onChange={(e) => setInputValue(e.target.value)}\n            placeholder=\"Type to search...\"\n            className=\"pl-10\"\n          />\n        </div>\n\n        <div className=\"grid grid-cols-2 gap-2 text-xs bg-muted/50 rounded-md p-2\">\n          <div>\n            <span className=\"text-muted-foreground\">Input:</span>\n            <div className=\"font-medium truncate\">\n              {inputValue || '(empty)'}\n            </div>\n          </div>\n          <div>\n            <span className=\"text-muted-foreground\">Debounced:</span>\n            <div className=\"font-medium truncate\">\n              {debouncedValue || '(empty)'}\n            </div>\n          </div>\n        </div>\n\n        <div className=\"min-h-[140px]\">\n          <div className=\"flex items-center justify-between mb-3\">\n            <span className=\"text-sm font-medium\">Results</span>\n            {isSearching && (\n              <div className=\"flex items-center gap-1 text-xs text-muted-foreground\">\n                <Loader2 className=\"h-3 w-3 animate-spin\" />\n                Searching...\n              </div>\n            )}\n            {!isSearching && results.length > 0 && (\n              <Badge variant=\"outline\" className=\"text-xs\">\n                {results.length} found\n              </Badge>\n            )}\n          </div>\n\n          {!isSearching && results.length > 0 && (\n            <div className=\"space-y-2\">\n              {results.map((result, index) => (\n                <div\n                  key={index}\n                  className=\"group relative p-3 bg-gradient-to-r from-muted/20 to-muted/10 rounded-lg border border-border/50 hover:border-primary/20 hover:shadow-sm transition-all duration-200 cursor-pointer\"\n                >\n                  <div className=\"flex items-start gap-3\">\n                    <div className=\"flex-shrink-0 w-8 h-8 bg-primary/10 rounded-full flex items-center justify-center\">\n                      <Search className=\"h-4 w-4 text-primary\" />\n                    </div>\n                    <div className=\"flex-1 min-w-0\">\n                      <div className=\"text-sm font-medium text-foreground mb-1\">\n                        {result.split(' - ')[1] || result}\n                      </div>\n                      <div className=\"text-xs text-muted-foreground\">\n                        Match for \"\\${debouncedValue}\" â€¢{' '}\n                        {Math.floor(Math.random() * 100)}% relevance\n                      </div>\n                    </div>\n                    <div className=\"flex-shrink-0 opacity-0 group-hover:opacity-100 transition-opacity\">\n                      <Button variant=\"ghost\" size=\"sm\" className=\"h-6 w-6 p-0\">\n                        <Plus className=\"h-3 w-3\" />\n                      </Button>\n                    </div>\n                  </div>\n                  <div className=\"absolute inset-0 bg-gradient-to-r from-primary/5 to-transparent opacity-0 group-hover:opacity-100 transition-opacity rounded-lg\" />\n                </div>\n              ))}\n            </div>\n          )}\n\n          {isSearching && (\n            <div className=\"space-y-2\">\n              {[1, 2, 3].map((i) => (\n                <div\n                  key={i}\n                  className=\"p-3 bg-muted/20 rounded-lg border border-border/30\"\n                >\n                  <div className=\"flex items-start gap-3\">\n                    <div className=\"w-8 h-8 bg-muted rounded-full animate-pulse\" />\n                    <div className=\"flex-1 space-y-2\">\n                      <div\n                        className=\"h-4 bg-muted rounded animate-pulse\"\n                        style={{ width: `${60 + Math.random() * 30}%` }}\n                      />\n                      <div\n                        className=\"h-3 bg-muted/60 rounded animate-pulse\"\n                        style={{ width: `${40 + Math.random() * 20}%` }}\n                      />\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n\n          {!isSearching && results.length === 0 && (\n            <div className=\"flex flex-col items-center justify-center h-24 text-center\">\n              {inputValue ? (\n                <>\n                  <Search className=\"h-8 w-8 text-muted-foreground/50 mb-2\" />\n                  <div className=\"text-xs text-muted-foreground\">\n                    No results found for \"\\${inputValue}\"\n                  </div>\n                  <div className=\"text-xs text-muted-foreground/70 mt-1\">\n                    Try adjusting your search terms\n                  </div>\n                </>\n              ) : (\n                <>\n                  <div className=\"w-12 h-12 bg-muted/30 rounded-full flex items-center justify-center mb-2\">\n                    <Search className=\"h-5 w-5 text-muted-foreground/50\" />\n                  </div>\n                  <div className=\"text-xs text-muted-foreground\">\n                    Start typing to search\n                  </div>\n                </>\n              )}\n            </div>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  )\n}\n\nexport default UseDebounceExample\n",
      "type": "registry:example",
      "target": "components/use-debounce-example.tsx"
    }
  ]
}
