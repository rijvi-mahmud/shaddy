{
  "$schema": "",
  "name": "unique-text-field",
  "type": "registry:component",
  "author": "shaddy (https://shaddy-docs.vercel.app/)",
  "dependencies": [],
  "devDependencies": [],
  "registryDependencies": [
    "http://localhost:3000/r/shaddy-form",
    "http://localhost:3000/r/use-debounce"
  ],
  "files": [
    {
      "path": "form/fields/unique-text-field.tsx",
      "content": "import { cn } from '@/lib/utils'\nimport { Check, Loader2 } from 'lucide-react'\nimport { useEffect, useState } from 'react'\nimport { FieldValues, Path, useFormContext } from 'react-hook-form'\nimport {\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from '@/components/ui/form'\nimport { Input } from '@/components/ui/input'\nimport { useDebounce } from '@/hooks/use-debounce'\n\ntype UniqueTextFieldProps<T extends FieldValues> = {\n  name: Path<T>\n  label?: string\n  placeholder?: string\n  required?: boolean\n  className?: string\n  type?: 'text' | 'email'\n  checkFunction: (value: string) => Promise<boolean>\n  debounceMs?: number\n}\n\n/**\n * Unique text field component\n *\n * @param name - The name of the field\n * @param label - The label of the field\n * @param placeholder - The placeholder of the field\n * @param required - The required status of the field\n * @param className - The class name of the field\n * @param type - The type of the field\n * @param checkFunction - The check function of the field\n * @param debounceMs - The debounce milliseconds of the field\n *\n * @returns {JSX.Element} - The unique text field component\n */\n\nexport const UniqueTextField = <T extends FieldValues>({\n  name,\n  label,\n  placeholder,\n  required = false,\n  className,\n  type = 'text',\n  checkFunction,\n  debounceMs = 1000,\n}: UniqueTextFieldProps<T>) => {\n  const { control, watch } = useFormContext<T>()\n  const value = watch(name)\n\n  const { isChecking, isAvailable } = useUniqueTextField({\n    value,\n    debounceMs,\n    checkFunction,\n  })\n\n  return (\n    <FormField\n      control={control}\n      name={name}\n      render={({ field }) => (\n        <FormItem className={className}>\n          {label && (\n            <FormLabel>\n              {label}\n              {required && <span className=\"text-red-500 ml-1\">*</span>}\n            </FormLabel>\n          )}\n          <FormControl>\n            <div className=\"relative\">\n              <Input\n                {...field}\n                type={type}\n                placeholder={placeholder}\n                className={cn(\n                  'pr-10',\n                  isAvailable &&\n                    'border-green-500 focus-visible:ring-green-500',\n                  isAvailable === false &&\n                    'border-red-500 focus-visible:ring-red-500'\n                )}\n              />\n              <div className=\"absolute right-3 top-1/2 -translate-y-1/2\">\n                {isChecking && (\n                  <Loader2 className=\"h-4 w-4 animate-spin text-gray-500\" />\n                )}\n                {!isChecking && isAvailable && (\n                  <Check className=\"h-4 w-4 text-green-500\" />\n                )}\n              </div>\n            </div>\n          </FormControl>\n          <FormMessage />\n        </FormItem>\n      )}\n    />\n  )\n}\n\nUniqueTextField.displayName = 'UniqueTextField'\n\n/**\n * Use unique text field hook\n *\n * @param value - The value of the field\n * @param debounceMs - The debounce milliseconds of the field\n * @param checkFunction - The check function of the field\n *\n * @returns {Object} - The unique text field hook\n */\n\nconst useUniqueTextField = ({\n  value,\n  debounceMs,\n  checkFunction,\n}: {\n  value: string\n  debounceMs: number\n  checkFunction: (value: string) => Promise<boolean>\n}) => {\n  const [isChecking, setIsChecking] = useState(false)\n  const [isAvailable, setIsAvailable] = useState<boolean | null>(null)\n  const debouncedValue = useDebounce(value, debounceMs)\n\n  useEffect(() => {\n    const checkAvailability = async () => {\n      if (!debouncedValue) {\n        setIsAvailable(null)\n        return\n      }\n\n      setIsChecking(true)\n      try {\n        const available = await checkFunction(debouncedValue)\n        setIsAvailable(available)\n      } catch (error) {\n        console.error('Availability check failed:', error)\n        setIsAvailable(null)\n      } finally {\n        setIsChecking(false)\n      }\n    }\n\n    checkAvailability()\n  }, [debouncedValue, checkFunction])\n\n  return {\n    isChecking,\n    isAvailable,\n  }\n}\n",
      "type": "registry:component",
      "target": "components/form/fields/unique-text-field.tsx"
    }
  ]
}
