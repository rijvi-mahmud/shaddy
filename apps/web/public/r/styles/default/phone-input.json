{
  "$schema": "",
  "name": "phone-input",
  "type": "registry:ui",
  "author": "shaddy (https://shaddy-docs.vercel.app/)",
  "dependencies": [
    "country-data-list",
    "libphonenumber-js",
    "react-circle-flags"
  ],
  "devDependencies": [],
  "registryDependencies": ["popover", "command", "input", "scroll-area"],
  "files": [
    {
      "path": "ui/phone-input.tsx",
      "content": "'use client'\nimport React, {\n  forwardRef,\n  useCallback,\n  useEffect,\n  useMemo,\n  useState,\n} from 'react'\nimport { countries, lookup } from 'country-data-list'\nimport parsePhoneNumber from 'libphonenumber-js'\nimport { CircleFlag } from 'react-circle-flags'\nimport { cn } from '@/lib/utils'\nimport {\n  CheckIcon,\n  ChevronDown,\n  ChevronsUpDown,\n  Globe,\n  GlobeIcon,\n} from 'lucide-react'\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from '@/components/ui/popover'\nimport {\n  Command,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList,\n} from '@/components/ui/command'\nimport { Input } from '@/components/ui/input'\nimport { ScrollArea } from '@/components/ui/scroll-area'\n\nexport type CountryData = (typeof countries.all)[number]\n\nexport interface PhoneInputProps\n  extends Omit<React.InputHTMLAttributes<HTMLInputElement>, 'onChange'> {\n  onCountryChange?: (data: CountryData | undefined) => void\n  value?: string\n  onPhoneChange?: (phone: string) => void\n  placeholder?: string\n  defaultCountry?: keyof typeof CountryAlpha2\n  className?: string\n  inline?: boolean\n  withCountryCodeSelector?: boolean\n  disabled?: boolean\n}\n\n// --- Utility functions ---\nfunction normalizePhone(value: string) {\n  if (!value.startsWith('+')) {\n    if (value.startsWith('00')) return '+' + value.slice(2)\n    return '+' + value\n  }\n  return value\n}\n\nfunction getCountryCode(country: CountryData) {\n  const code = country.countryCallingCodes[0] || ''\n  return code.startsWith('+') ? code : `+${code}`\n}\n\n// --- Main PhoneInput component ---\nexport const PhoneInput = forwardRef<HTMLInputElement, PhoneInputProps>(\n  (\n    {\n      className,\n      onCountryChange,\n      onPhoneChange,\n      value,\n      placeholder = 'Enter your phone number',\n      name,\n      defaultCountry,\n      inline = false,\n      withCountryCodeSelector = true,\n      disabled = false,\n      ...props\n    },\n    ref\n  ) => {\n    const [data, setData] = useState<{\n      code: string\n      flag: string\n      country: CountryData | undefined\n      selectedCountry: CountryData | undefined\n      hasInitialized: boolean\n      phone: string\n    }>({\n      phone: value || '',\n      code: '',\n      flag: '',\n      country: undefined,\n      selectedCountry: undefined,\n      hasInitialized: false,\n    })\n\n    // Memoize country options for dropdown\n    const countryOptions = useMemo(\n      () =>\n        countries.all.filter(\n          (country: CountryData) =>\n            country.emoji &&\n            country.status !== 'deleted' &&\n            country.ioc !== 'PRK'\n        ),\n      []\n    )\n\n    // Initialize with defaultCountry\n    useEffect(() => {\n      if (!defaultCountry || !withCountryCodeSelector) return\n      const newCountryData = lookup.countries({\n        alpha2: CountryAlpha2[defaultCountry].toLowerCase(),\n      })[0]\n      if (!newCountryData) return\n\n      setData((prev) => ({\n        ...prev,\n        code: getCountryCode(newCountryData),\n        phone: getCountryCode(newCountryData),\n        flag: newCountryData.alpha2.toLowerCase(),\n        country: newCountryData,\n        selectedCountry: newCountryData,\n        hasInitialized: true,\n      }))\n\n      if (!value) {\n        onPhoneChange?.(getCountryCode(newCountryData))\n      }\n    }, [defaultCountry, onPhoneChange, value])\n\n    // Handle country dropdown change\n    const handleCountryDropdownChange = useCallback(\n      (country: CountryData) => {\n        const code = getCountryCode(country)\n        setData((prev) => ({\n          ...prev,\n          flag: country.alpha2.toLowerCase(),\n          country,\n          selectedCountry: country,\n          phone: code,\n          code,\n        }))\n        onCountryChange?.(country)\n\n        if (!value || !value.startsWith(code)) {\n          onPhoneChange?.(code)\n        }\n      },\n      [onCountryChange, onPhoneChange, value]\n    )\n\n    // Handle phone input change\n    const handlePhoneChange = useCallback(\n      (e: React.ChangeEvent<HTMLInputElement>) => {\n        let newValue = e.target.value\n\n        if (!withCountryCodeSelector) {\n          onPhoneChange?.(newValue)\n          setData((prev) => ({\n            ...prev,\n            phone: newValue,\n          }))\n          return\n        }\n\n        if (data.selectedCountry) {\n          const code = getCountryCode(data.selectedCountry)\n          if (!newValue.startsWith(code)) {\n            newValue = code + newValue.replace(/^\\+?\\d*/, '')\n          }\n        } else {\n          newValue = normalizePhone(newValue)\n        }\n\n        try {\n          const parsed = parsePhoneNumber(newValue)\n\n          if (parsed && parsed.country) {\n            const countryCode = parsed.country\n            const countryInfo = lookup.countries({ alpha2: countryCode })[0]\n            setData((prev) => ({\n              ...prev,\n              flag: countryCode.toLowerCase(),\n              country: countryInfo,\n              selectedCountry: countryInfo,\n              phone: parsed.number,\n            }))\n            onCountryChange?.(countryInfo)\n            onPhoneChange?.(parsed.number)\n          } else {\n            setData((prev) => ({\n              ...prev,\n              phone: newValue,\n              flag: '',\n              country: undefined,\n              selectedCountry: undefined,\n            }))\n            onCountryChange?.(undefined)\n            onPhoneChange?.(newValue)\n          }\n        } catch {\n          setData((prev) => ({\n            ...prev,\n            phone: newValue,\n            flag: '',\n            country: undefined,\n            selectedCountry: undefined,\n          }))\n          onCountryChange?.(undefined)\n          onPhoneChange?.(newValue)\n        }\n      },\n      [data.selectedCountry, onCountryChange, onPhoneChange]\n    )\n\n    const inputClasses = cn(\n      'flex items-center gap-2 relative bg-transparent transition-colors text-base rounded-md border pl-3 h-9 disabled:opacity-50 disabled:cursor-not-allowed md:text-sm has-[input:focus]:outline-none has-[input:focus]:ring-1 has-[input:focus]:ring-ring [interpolate-size:allow-keywords]',\n      inline && 'rounded-l-none w-full',\n      className\n    )\n\n    if (withCountryCodeSelector) {\n      return (\n        <div className={cn('flex items-center w-full', className)}>\n          <CountryDropdown\n            disabled={disabled}\n            onChange={handleCountryDropdownChange}\n            defaultValue={\n              data.selectedCountry?.alpha2 ||\n              (defaultCountry ? CountryAlpha2[defaultCountry] : undefined)\n            }\n            className={cn(inputClasses, 'rounded-r-none border-r-0')}\n            inline\n            options={countryOptions}\n          />\n          <div className=\"flex-1\">\n            <div className=\"flex items-center w-full\">\n              <Input\n                ref={ref}\n                value={data.phone}\n                onChange={handlePhoneChange}\n                placeholder={placeholder}\n                type=\"tel\"\n                autoComplete=\"tel\"\n                name={name}\n                className={cn(\n                  'h-9 rounded-l-none border-l-0 pl-3',\n                  'flex w-full bg-transparent text-base transition-colors placeholder:text-muted-foreground outline-none py-1 leading-none md:text-sm [interpolate-size:allow-keywords]',\n                  className\n                )}\n                disabled={disabled}\n                {...props}\n              />\n            </div>\n          </div>\n        </div>\n      )\n    }\n\n    return (\n      <div className={inputClasses}>\n        {!inline && (\n          <div className=\"w-4 h-4 rounded-full shrink-0\">\n            {data.flag ? (\n              <CircleFlag countryCode={data.flag} height={16} />\n            ) : (\n              <GlobeIcon size={16} />\n            )}\n          </div>\n        )}\n        <Input\n          ref={ref}\n          value={data.phone}\n          onChange={handlePhoneChange}\n          placeholder={placeholder}\n          type=\"tel\"\n          autoComplete=\"tel\"\n          name={name}\n          className={cn(\n            'flex w-full border-none bg-transparent text-base transition-colors placeholder:text-muted-foreground outline-none h-9 py-1 p-0 leading-none md:text-sm [interpolate-size:allow-keywords] focus-visible:outline-none focus-visible:ring-0 focus-visible:ring-transparent',\n            className\n          )}\n          disabled={disabled}\n          {...props}\n        />\n      </div>\n    )\n  }\n)\n\nPhoneInput.displayName = 'PhoneInput'\n\n// --- CountryDropdown ---\ntype CountryDropdownProps = {\n  options?: CountryData[]\n  disabled?: boolean\n  placeholder?: string\n  slim?: boolean\n  inline?: boolean\n  className?: string\n  onChange?: (country: CountryData) => void\n  defaultValue?: string | keyof typeof CountryAlpha2\n}\n\nconst CountryDropdownComponent = (\n  {\n    options = countries.all.filter(\n      (country: CountryData) =>\n        country.emoji && country.status !== 'deleted' && country.ioc !== 'PRK'\n    ),\n    onChange,\n    defaultValue,\n    disabled = false,\n    placeholder = 'Select a country',\n    slim = false,\n    inline = false,\n    className,\n    ...props\n  }: CountryDropdownProps,\n  ref: React.ForwardedRef<HTMLButtonElement>\n) => {\n  const [open, setOpen] = useState(false)\n  const [selectedCountry, setSelectedCountry] = useState<\n    CountryData | undefined\n  >()\n\n  useEffect(() => {\n    if (!defaultValue) {\n      setSelectedCountry(undefined)\n      return\n    }\n    if (typeof defaultValue === 'string') {\n      const initialCountry = options.find(\n        (country) => country.alpha2 === defaultValue\n      )\n      setSelectedCountry(initialCountry)\n    }\n  }, [defaultValue, options])\n\n  const handleSelect = useCallback(\n    (country: CountryData) => {\n      setSelectedCountry(country)\n      onChange?.(country)\n      setOpen(false)\n    },\n    [onChange]\n  )\n\n  const triggerClasses = cn(\n    'flex h-9 w-full items-center justify-between whitespace-nowrap rounded-md border bg-transparent px-3 py-1 text-base transition-colors placeholder:text-muted-foreground outline-none md:text-sm [interpolate-size:allow-keywords]',\n    slim === true && 'gap-1 w-min',\n    inline && 'rounded-r-none border-r-0 gap-1 pr-1 w-min',\n    className\n  )\n\n  return (\n    <Popover open={open} onOpenChange={setOpen}>\n      <PopoverTrigger\n        ref={ref}\n        className={triggerClasses}\n        disabled={disabled}\n        {...props}\n      >\n        {selectedCountry ? (\n          <div className=\"flex items-center flex-grow gap-2 overflow-hidden\">\n            <div className=\"inline-flex items-center justify-center w-4 h-4 shrink-0 overflow-hidden rounded-full\">\n              <CircleFlag\n                countryCode={selectedCountry.alpha2.toLowerCase() || ''}\n                height={16}\n              />\n            </div>\n            {slim === false && !inline && (\n              <span className=\"overflow-hidden text-ellipsis whitespace-nowrap\">\n                {selectedCountry.name}\n              </span>\n            )}\n          </div>\n        ) : (\n          <span className=\"flex items-center gap-2\">\n            {inline || slim ? <Globe size={16} /> : placeholder}\n          </span>\n        )}\n\n        {!inline ? (\n          <ChevronDown size={16} />\n        ) : (\n          <ChevronsUpDown size={16} className=\"text-muted-foreground\" />\n        )}\n      </PopoverTrigger>\n      <PopoverContent\n        collisionPadding={10}\n        side=\"bottom\"\n        className=\"min-w-[--radix-popper-anchor-width] p-0\"\n      >\n        <ScrollArea className=\"w-full max-h-[200px] sm:max-h-[270px]\">\n          <Command className=\"w-full\">\n            <CommandList>\n              <div className=\"sticky top-0 z-10 bg-popover\">\n                <CommandInput placeholder=\"Search country...\" />\n              </div>\n              <CommandEmpty>No country found.</CommandEmpty>\n              <CommandGroup>\n                {options\n                  .filter((country) => country.name)\n                  .map((option, key) => (\n                    <CommandItem\n                      className=\"flex items-center w-full gap-2\"\n                      key={key}\n                      onSelect={() => handleSelect(option)}\n                    >\n                      <div className=\"flex flex-grow space-x-2 overflow-hidden\">\n                        <div className=\"inline-flex items-center justify-center w-5 h-5 shrink-0 overflow-hidden rounded-full\">\n                          <CircleFlag\n                            countryCode={option.alpha2.toLowerCase()}\n                            height={20}\n                          />\n                        </div>\n                        <span className=\"overflow-hidden text-ellipsis whitespace-nowrap\">\n                          {option.name}\n                        </span>\n                      </div>\n                      <CheckIcon\n                        className={cn(\n                          'ml-auto h-4 w-4 shrink-0',\n                          selectedCountry?.name === option.name\n                            ? 'opacity-100'\n                            : 'opacity-0'\n                        )}\n                      />\n                    </CommandItem>\n                  ))}\n              </CommandGroup>\n            </CommandList>\n          </Command>\n        </ScrollArea>\n      </PopoverContent>\n    </Popover>\n  )\n}\n\nCountryDropdownComponent.displayName = 'CountryDropdownComponent'\n\nexport const CountryDropdown = forwardRef(CountryDropdownComponent)\n\nexport enum CountryAlpha2 {\n  Ascension_Island = 'AC',\n  Andorra = 'AD',\n  United_Arab_Emirates = 'AE',\n  Afghanistan = 'AF',\n  Antigua_And_Barbuda = 'AG',\n  Anguilla = 'AI',\n  French_Afar_and_Issas = 'AI',\n  Albania = 'AL',\n  Armenia = 'AM',\n  Netherlands_Antilles = 'AN',\n  Angola = 'AO',\n  Antarctica = 'AQ',\n  Argentina = 'AR',\n  American_Samoa = 'AS',\n  Austria = 'AT',\n  Australia = 'AU',\n  Aruba = 'AW',\n  Åland_Islands = 'AX',\n  Azerbaijan = 'AZ',\n  Bosnia_and_Herzegovina = 'BA',\n  Barbados = 'BB',\n  Bangladesh = 'BD',\n  Belgium = 'BE',\n  Burkina_Faso = 'BF',\n  Bulgaria = 'BG',\n  Bahrain = 'BH',\n  Burundi = 'BI',\n  Benin = 'BJ',\n  Saint_Barthélemy = 'BL',\n  Bermuda = 'BM',\n  Brunei_Darussalam = 'BN',\n  Bolivia_Plurinational_State_Of = 'BO',\n  Bonaire_Sint_Eustatius_And_Saba = 'BQ',\n  British_Antarctic_Territory = 'BQ',\n  Brazil = 'BR',\n  Bahamas = 'BS',\n  Bhutan = 'BT',\n  Bouvet_Island = 'BV',\n  Botswana = 'BW',\n  Belarus = 'BY',\n  Byelorussian_SSR = 'BY',\n  Belize = 'BZ',\n  Canada = 'CA',\n  Cocos_Keeling_Islands = 'CC',\n  Democratic_Republic_Of_Congo = 'CD',\n  Central_African_Republic = 'CF',\n  Republic_Of_Congo = 'CG',\n  Switzerland = 'CH',\n  Côte_dIvoire = 'CI',\n  Cook_Islands = 'CK',\n  Chile = 'CL',\n  Cameroon = 'CM',\n  China = 'CN',\n  Colombia = 'CO',\n  Clipperton_Island = 'CP',\n  Costa_Rica = 'CR',\n  Czechoslovakia = 'CS',\n  Serbia_and_Montenegro = 'CS',\n  Canton_and_Enderbury_Islands = 'CT',\n  Cuba = 'CU',\n  Cabo_Verde = 'CV',\n  Curacao = 'CW',\n  Christmas_Island = 'CX',\n  Cyprus = 'CY',\n  Czech_Republic = 'CZ',\n  German_Democratic_Republic = 'DD',\n  Germany = 'DE',\n  Diego_Garcia = 'DG',\n  Djibouti = 'DJ',\n  Denmark = 'DK',\n  Dominica = 'DM',\n  Dominican_Republic = 'DO',\n  Dahomey = 'DY',\n  Algeria = 'DZ',\n  Ceuta_Mulilla = 'EA',\n  Ecuador = 'EC',\n  Estonia = 'EE',\n  Egypt = 'EG',\n  Western_Sahara = 'EH',\n  Eritrea = 'ER',\n  Spain = 'ES',\n  Ethiopia = 'ET',\n  European_Union = 'EU',\n  Finland = 'FI',\n  Fiji = 'FJ',\n  Falkland_Islands = 'FK',\n  Micronesia_Federated_States_Of = 'FM',\n  Faroe_Islands = 'FO',\n  France = 'FR',\n  France_Metropolitan = 'FX',\n  Gabon = 'GA',\n  United_Kingdom = 'GB',\n  Grenada = 'GD',\n  Georgia = 'GE',\n  Gilbert_and_Ellice_Islands = 'GE',\n  French_Guiana = 'GF',\n  Guernsey = 'GG',\n  Ghana = 'GH',\n  Gibraltar = 'GI',\n  Greenland = 'GL',\n  Gambia = 'GM',\n  Guinea = 'GN',\n  Guadeloupe = 'GP',\n  Equatorial_Guinea = 'GQ',\n  Greece = 'GR',\n  South_Georgia_And_The_South_Sandwich_Islands = 'GS',\n  Guatemala = 'GT',\n  Guam = 'GU',\n  Guinea_bissau = 'GW',\n  Guyana = 'GY',\n  Hong_Kong = 'HK',\n  Heard_Island_And_McDonald_Islands = 'HM',\n  Honduras = 'HN',\n  Croatia = 'HR',\n  Haiti = 'HT',\n  Hungary = 'HU',\n  Upper_Volta = 'HV',\n  Canary_Islands = 'IC',\n  Indonesia = 'ID',\n  Ireland = 'IE',\n  Israel = 'IL',\n  Isle_Of_Man = 'IM',\n  India = 'IN',\n  British_Indian_Ocean_Territory = 'IO',\n  Iraq = 'IQ',\n  Iran_Islamic_Republic_Of = 'IR',\n  Iceland = 'IS',\n  Italy = 'IT',\n  Jersey = 'JE',\n  Jamaica = 'JM',\n  Jordan = 'JO',\n  Japan = 'JP',\n  Johnston_Island = 'JT',\n  Kenya = 'KE',\n  Kyrgyzstan = 'KG',\n  Cambodia = 'KH',\n  Kiribati = 'KI',\n  Comoros = 'KM',\n  Saint_Kitts_And_Nevis = 'KN',\n  Korea_Democratic_Peoples_Republic_Of = 'KP',\n  Korea_Republic_Of = 'KR',\n  Kuwait = 'KW',\n  Cayman_Islands = 'KY',\n  Kazakhstan = 'KZ',\n  Lao_Peoples_Democratic_Republic = 'LA',\n  Lebanon = 'LB',\n  Saint_Lucia = 'LC',\n  Liechtenstein = 'LI',\n  Sri_Lanka = 'LK',\n  Liberia = 'LR',\n  Lesotho = 'LS',\n  Lithuania = 'LT',\n  Luxembourg = 'LU',\n  Latvia = 'LV',\n  Libya = 'LY',\n  Morocco = 'MA',\n  Monaco = 'MC',\n  Moldova = 'MD',\n  Montenegro = 'ME',\n  Saint_Martin = 'MF',\n  Madagascar = 'MG',\n  Marshall_Islands = 'MH',\n  Midway_Islands = 'MI',\n  North_Macedonia = 'MK',\n  Mali = 'ML',\n  Myanmar = 'MM',\n  Mongolia = 'MN',\n  Macao = 'MO',\n  Northern_Mariana_Islands = 'MP',\n  Martinique = 'MQ',\n  Mauritania = 'MR',\n  Montserrat = 'MS',\n  Malta = 'MT',\n  Mauritius = 'MU',\n  Maldives = 'MV',\n  Malawi = 'MW',\n  Mexico = 'MX',\n  Malaysia = 'MY',\n  Mozambique = 'MZ',\n  Namibia = 'NA',\n  New_Caledonia = 'NC',\n  Niger = 'NE',\n  Norfolk_Island = 'NF',\n  Nigeria = 'NG',\n  New_Hebrides = 'NH',\n  Nicaragua = 'NI',\n  Netherlands = 'NL',\n  Norway = 'NO',\n  Nepal = 'NP',\n  Dronning_Maud_Land = 'NQ',\n  Nauru = 'NR',\n  Neutral_Zone = 'NT',\n  Niue = 'NU',\n  New_Zealand = 'NZ',\n  Oman = 'OM',\n  Panama = 'PA',\n  Pacific_Islands_Trust_Territory_of_the = 'PC',\n  Peru = 'PE',\n  French_Polynesia = 'PF',\n  Papua_New_Guinea = 'PG',\n  Philippines = 'PH',\n  Pakistan = 'PK',\n  Poland = 'PL',\n  Saint_Pierre_And_Miquelon = 'PM',\n  Pitcairn = 'PN',\n  Puerto_Rico = 'PR',\n  Palestinian_Territory_Occupied = 'PS',\n  Portugal = 'PT',\n  US_Miscellaneous_Pacific_Islands = 'PU',\n  Palau = 'PW',\n  Paraguay = 'PY',\n  Panama_Canal_Zone = 'PZ',\n  Qatar = 'QA',\n  Reunion = 'RE',\n  Southern_Rhodesia = 'RH',\n  Romania = 'RO',\n  Serbia = 'RS',\n  Russia = 'RU',\n  Rwanda = 'RW',\n  Saudi_Arabia = 'SA',\n  Solomon_Islands = 'SB',\n  Seychelles = 'SC',\n  Sudan = 'SD',\n  Sweden = 'SE',\n  Singapore = 'SG',\n  Saint_Helena_Ascension_And_Tristan_Da_Cunha = 'SH',\n  Slovenia = 'SI',\n  Svalbard_And_Jan_Mayen = 'SJ',\n  Slovakia = 'SK',\n  Sikkim = 'SK',\n  Sierra_Leone = 'SL',\n  San_Marino = 'SM',\n  Senegal = 'SN',\n  Somalia = 'SO',\n  Suriname = 'SR',\n  South_Sudan = 'SS',\n  Sao_Tome_and_Principe = 'ST',\n  USSR = 'SU',\n  El_Salvador = 'SV',\n  Sint_Maarten = 'SX',\n  Syrian_Arab_Republic = 'SY',\n  Eswatini = 'SZ',\n  Tristan_de_Cunha = 'TA',\n  Turks_And_Caicos_Islands = 'TC',\n  Chad = 'TD',\n  French_Southern_Territories = 'TF',\n  Togo = 'TG',\n  Thailand = 'TH',\n  Tajikistan = 'TJ',\n  Tokelau = 'TK',\n  Timor_Leste_Democratic_Republic_of = 'TL',\n  Turkmenistan = 'TM',\n  Tunisia = 'TN',\n  Tonga = 'TO',\n  East_Timor = 'TP',\n  Turkey = 'TR',\n  Trinidad_And_Tobago = 'TT',\n  Tuvalu = 'TV',\n  Taiwan = 'TW',\n  Tanzania_United_Republic_Of = 'TZ',\n  Ukraine = 'UA',\n  Uganda = 'UG',\n  United_States_Minor_Outlying_Islands = 'UM',\n  United_States = 'US',\n  Uruguay = 'UY',\n  Uzbekistan = 'UZ',\n  Vatican_City_State = 'VA',\n  Saint_Vincent_And_The_Grenadines = 'VC',\n  Viet_Nam_Democratic_Republic_of = 'VD',\n  Venezuela_Bolivarian_Republic_Of = 'VE',\n  Virgin_Islands_British = 'VG',\n  Virgin_Islands_US = 'VI',\n  VietNam = 'VN',\n  Vanuatu = 'VU',\n  Wallis_And_Futuna = 'WF',\n  Wake_Island = 'WK',\n  Samoa = 'WS',\n  Kosovo = 'XK',\n  Yemen_Democratic = 'YD',\n  Yemen = 'YE',\n  Mayotte = 'YT',\n  Yugoslavia = 'YU',\n  South_Africa = 'ZA',\n  Zambia = 'ZM',\n  Zaire = 'ZR',\n  Zimbabwe = 'ZW',\n}\n",
      "type": "registry:ui",
      "target": "components/ui/phone-input.tsx"
    }
  ]
}
