{
  "$schema": "",
  "name": "use-local-storage-form-example",
  "type": "registry:example",
  "author": "shaddy (https://shaddy-docs.vercel.app/)",
  "dependencies": [],
  "devDependencies": [],
  "registryDependencies": [],
  "files": [
    {
      "path": "examples/hooks/use-local-storage-form-example.tsx",
      "content": "'use client'\nimport { Badge } from '@/components/ui/badge'\nimport { Button } from '@/components/ui/button'\nimport { Input } from '@/components/ui/input'\nimport { Label } from '@/components/ui/label'\nimport { Textarea } from '@/components/ui/textarea'\nimport { useLocalStorage } from '@/registry/default/hooks/use-local-storage'\nimport { Save, Trash2 } from 'lucide-react'\nimport { useState } from 'react'\n\n// Example 3: Form data persistence\nconst FormExample = () => {\n  type DraftForm = {\n    title: string\n    content: string\n    category: string\n    tags: string[]\n    priority: string\n  }\n\n  const [formData, setFormData, removeFormData] = useLocalStorage<DraftForm>(\n    'draft-form',\n    {\n      title: '',\n      content: '',\n      category: 'general',\n      tags: [],\n      priority: 'medium',\n    }\n  )\n\n  const [newTag, setNewTag] = useState('')\n\n  const updateField = (field: string, value: any) => {\n    setFormData((prev) => ({ ...prev, [field]: value }))\n  }\n\n  const addTag = () => {\n    if (newTag.trim() && !formData.tags.includes(newTag.trim())) {\n      updateField('tags', [...formData.tags, newTag.trim()])\n      setNewTag('')\n    }\n  }\n\n  const removeTag = (tagToRemove: string) => {\n    updateField(\n      'tags',\n      formData.tags.filter((tag) => tag !== tagToRemove)\n    )\n  }\n\n  const handleSubmit = () => {\n    alert('Form submitted! (In real app, this would save to server)')\n    removeFormData() // Clear draft after submission\n  }\n\n  const isEmpty =\n    !formData.title && !formData.content && formData.tags.length === 0\n\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"bg-muted/30 rounded-md p-4 shadow-sm\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <h3 className=\"text-lg font-semibold\">Draft Article</h3>\n          <div className=\"flex items-center gap-2\">\n            {!isEmpty && (\n              <Badge variant=\"outline\">\n                <Save className=\"h-3 w-3 mr-1\" />\n                Auto-saved\n              </Badge>\n            )}\n          </div>\n        </div>\n\n        <div className=\"space-y-4\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"title\">Title</Label>\n            <Input\n              id=\"title\"\n              value={formData.title}\n              onChange={(e) => updateField('title', e.target.value)}\n              placeholder=\"Enter article title...\"\n            />\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"content\">Content</Label>\n            <Textarea\n              id=\"content\"\n              value={formData.content}\n              onChange={(e) => updateField('content', e.target.value)}\n              placeholder=\"Write your article content here...\"\n              rows={6}\n            />\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label>Tags</Label>\n            <div className=\"flex gap-2\">\n              <Input\n                value={newTag}\n                onChange={(e) => setNewTag(e.target.value)}\n                placeholder=\"Add tag...\"\n                onKeyUp={(e) => e.key === 'Enter' && addTag()}\n                className=\"flex-1\"\n              />\n              <Button onClick={addTag} size=\"sm\" disabled={!newTag.trim()}>\n                Add\n              </Button>\n            </div>\n            {formData.tags.length > 0 && (\n              <div className=\"flex flex-wrap gap-2 mt-2\">\n                {formData.tags.map((tag) => (\n                  <Badge\n                    key={tag}\n                    variant=\"secondary\"\n                    className=\"cursor-pointer hover:bg-destructive hover:text-destructive-foreground\"\n                    onClick={() => removeTag(tag)}\n                  >\n                    {tag} Ã—\n                  </Badge>\n                ))}\n              </div>\n            )}\n          </div>\n        </div>\n\n        <div className=\"flex gap-2 mt-6\">\n          <Button onClick={handleSubmit} disabled={isEmpty}>\n            Submit Article\n          </Button>\n          <Button onClick={removeFormData} variant=\"outline\" disabled={isEmpty}>\n            <Trash2 className=\"h-4 w-4 mr-1\" />\n            Clear Draft\n          </Button>\n        </div>\n      </div>\n\n      <div className=\"text-sm p-2 bg-muted/30 text-muted-foreground rounded border\">\n        <code className=\"font-mono text-xs\">\n          Auto-saves form data as you type - try refreshing the page!\n        </code>\n      </div>\n    </div>\n  )\n}\n\nexport default FormExample\n",
      "type": "registry:example",
      "target": "components/use-local-storage-form-example.tsx"
    }
  ]
}
