{
  "$schema": "",
  "name": "use-event-listener-example",
  "type": "registry:example",
  "author": "shaddy (https://shaddy-docs.vercel.app/)",
  "dependencies": [],
  "devDependencies": [],
  "registryDependencies": [],
  "files": [
    {
      "path": "examples/hooks/use-event-listener-example.tsx",
      "content": "'use client'\n\nimport { Card, CardContent } from '@/components/ui/card'\nimport { useEventListener } from '@/registry/default/hooks/use-event-listener'\nimport { MousePointer, EyeIcon, EyeOffIcon, Keyboard } from 'lucide-react'\nimport { useState, useRef } from 'react'\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'\nimport { Link } from '@/navigation'\n\nconst UseEventListenerExample = () => {\n  return (\n    <Card className=\"w-full border\">\n      <CardContent className=\"pt-6\">\n        <Tabs defaultValue=\"click\">\n          <TabsList className=\"grid grid-cols-3 mb-4\">\n            <TabsTrigger value=\"click\">Click Events</TabsTrigger>\n            <TabsTrigger value=\"keyboard\">Keyboard Events</TabsTrigger>\n            <TabsTrigger value=\"delegation\">Event Delegation</TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"click\" className=\"space-y-4\">\n            <ClickExample />\n          </TabsContent>\n\n          <TabsContent value=\"keyboard\" className=\"space-y-4\">\n            <KeyboardExample />\n          </TabsContent>\n\n          <TabsContent value=\"delegation\" className=\"space-y-4\">\n            <DelegationExample />\n          </TabsContent>\n        </Tabs>\n      </CardContent>\n    </Card>\n  )\n}\n\nexport default UseEventListenerExample\n\n// Example 1: Basic click events (similar to original)\nconst ClickExample = () => {\n  const [isVisible, setIsVisible] = useState(true)\n  const [clickCount, setClickCount] = useState(0)\n\n  // Using useEventListener with window (default target)\n  useEventListener('click', () => {\n    setIsVisible(!isVisible)\n    setClickCount((prev) => prev + 1)\n  })\n\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"bg-muted/30 rounded-md p-4 shadow-sm transition-all duration-200\">\n        <div className=\"flex justify-center items-center gap-3 py-3\">\n          <div className=\"text-center\">\n            <div className=\"text-sm text-muted-foreground mb-1\">Status</div>\n            <div className=\"text-2xl sm:text-3xl md:text-4xl font-bold tabular-nums text-primary transition-all duration-200 flex items-center justify-center\">\n              {isVisible ? (\n                <>\n                  <EyeIcon className=\"h-6 w-6 mr-2\" />\n                  Visible\n                </>\n              ) : (\n                <>\n                  <EyeOffIcon className=\"h-6 w-6 mr-2\" />\n                  Hidden\n                </>\n              )}\n            </div>\n          </div>\n        </div>\n\n        <div className=\"text-xs sm:text-sm text-center mt-2 font-medium\">\n          <MousePointer className=\"inline h-3 w-3 mr-1\" />\n          Click anywhere to toggle visibility (click count: {clickCount})\n        </div>\n      </div>\n\n      <div className=\"text-sm p-2 bg-muted/30 text-muted-foreground rounded border\">\n        <code className=\"font-mono text-xs\">\n          useEventListener('click', handler)\n        </code>{' '}\n        - Attaches to window by default\n      </div>\n    </div>\n  )\n}\n\n// Example 2: Keyboard events\nconst KeyboardExample = () => {\n  const [lastKey, setLastKey] = useState<string>('None')\n  const [keyHistory, setKeyHistory] = useState<string[]>([])\n\n  // Using useEventListener with document and keyboard events\n  useEventListener(\n    'keydown',\n    (event) => {\n      const key = event.key\n      setLastKey(key)\n      setKeyHistory((prev) => [key, ...prev.slice(0, 4)])\n    },\n    document\n  )\n\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"bg-muted/30 rounded-md p-4 shadow-sm\">\n        <div className=\"flex justify-center items-center py-3\">\n          <div className=\"text-center\">\n            <div className=\"text-sm text-muted-foreground mb-1\">\n              Last Key Pressed\n            </div>\n            <div className=\"text-2xl sm:text-3xl font-mono font-bold text-primary flex items-center justify-center\">\n              <Keyboard className=\"h-5 w-5 mr-2\" />\n              {lastKey === ' ' ? 'Space' : lastKey}\n            </div>\n          </div>\n        </div>\n\n        <div className=\"mt-4 grid grid-cols-5 gap-2\">\n          {keyHistory.map((key, index) => (\n            <div\n              key={index}\n              className=\"bg-muted p-2 rounded text-center text-sm font-mono border\"\n            >\n              {key === ' ' ? 'Space' : key}\n            </div>\n          ))}\n        </div>\n\n        <div className=\"text-center text-xs sm:text-sm mt-4 py-2 bg-muted/50 rounded-md text-muted-foreground\">\n          Press any key to see it captured here\n        </div>\n      </div>\n\n      <div className=\"text-sm p-2 bg-muted/30 text-muted-foreground rounded border\">\n        <code className=\"font-mono text-xs\">\n          useEventListener('keydown', handler, document)\n        </code>{' '}\n        - Attaches to document\n      </div>\n    </div>\n  )\n}\n\n// Example 3: Event delegation\nconst DelegationExample = () => {\n  const [users, setUsers] = useState([\n    {\n      id: 1,\n      name: 'Alex Johnson',\n      email: 'alex@example.com',\n      status: 'Active',\n    },\n    {\n      id: 2,\n      name: 'Sam Williams',\n      email: 'sam@example.com',\n      status: 'Inactive',\n    },\n    {\n      id: 3,\n      name: 'Taylor Brown',\n      email: 'taylor@example.com',\n      status: 'Active',\n    },\n    {\n      id: 4,\n      name: 'Jordan Smith',\n      email: 'jordan@example.com',\n      status: 'Pending',\n    },\n    {\n      id: 5,\n      name: 'Casey Miller',\n      email: 'casey@example.com',\n      status: 'Active',\n    },\n  ])\n  const [lastAction, setLastAction] = useState<string>('')\n  const [sortField, setSortField] = useState<string>('name')\n  const [sortDirection, setSortDirection] = useState<'asc' | 'desc'>('asc')\n  const [selectedRows, setSelectedRows] = useState<number[]>([])\n\n  const tableRef = useRef<HTMLTableElement>(null)\n\n  // Sort users based on current sort field and direction\n  const sortedUsers = [...users].sort((a, b) => {\n    const aValue = a[sortField as keyof typeof a]\n    const bValue = b[sortField as keyof typeof b]\n    return sortDirection === 'asc'\n      ? String(aValue).localeCompare(String(bValue))\n      : String(bValue).localeCompare(String(aValue))\n  })\n\n  // Using a SINGLE event listener to handle ALL table interactions\n  useEventListener(\n    'click',\n    (event, target) => {\n      if (!target) return\n\n      // Handle different actions based on data attributes\n      const action = target.getAttribute('data-action')\n\n      if (action === 'sort') {\n        const field = target.getAttribute('data-field')\n        if (field) {\n          if (sortField === field) {\n            // Toggle direction if clicking same field\n            setSortDirection(sortDirection === 'asc' ? 'desc' : 'asc')\n          } else {\n            // New field, default to ascending\n            setSortField(field)\n            setSortDirection('asc')\n          }\n          setLastAction(\n            `Sorted by ${field} (${sortDirection === 'asc' ? 'ascending' : 'descending'})`\n          )\n        }\n      } else if (action === 'select-all') {\n        if (selectedRows.length === users.length) {\n          // Deselect all\n          setSelectedRows([])\n          setLastAction('Deselected all rows')\n        } else {\n          // Select all\n          setSelectedRows(users.map((u) => u.id))\n          setLastAction('Selected all rows')\n        }\n      } else if (action === 'select-row') {\n        const rowId = parseInt(target.getAttribute('data-id') || '0')\n        if (rowId) {\n          setSelectedRows((prev) =>\n            prev.includes(rowId)\n              ? prev.filter((id) => id !== rowId)\n              : [...prev, rowId]\n          )\n          setLastAction(\n            `${selectedRows.includes(rowId) ? 'Deselected' : 'Selected'} user #${rowId}`\n          )\n        }\n      } else if (action === 'view') {\n        const userId = target.closest('tr')?.getAttribute('data-id')\n        const user = users.find((u) => u.id.toString() === userId)\n        setLastAction(`Viewing details for ${user?.name}`)\n      } else if (action === 'edit') {\n        const userId = target.closest('tr')?.getAttribute('data-id')\n        const user = users.find((u) => u.id.toString() === userId)\n        setLastAction(`Editing ${user?.name}`)\n      } else if (action === 'delete') {\n        const userId = parseInt(\n          target.closest('tr')?.getAttribute('data-id') || '0'\n        )\n        if (userId) {\n          setUsers(users.filter((u) => u.id !== userId))\n          setSelectedRows(selectedRows.filter((id) => id !== userId))\n          setLastAction(`Deleted user #${userId}`)\n        }\n      }\n    },\n    tableRef.current,\n    { selector: '[data-action]' }\n  )\n\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"bg-muted/30 rounded-md p-4 shadow-sm\">\n        <div className=\"text-center mb-3\">\n          <div className=\"text-sm text-muted-foreground mb-1\">\n            Interactive Data Table\n          </div>\n          <div className=\"text-lg font-medium\">\n            One event listener for all table interactions\n          </div>\n          <span className={'text-xs text-muted-foreground'}>\n            Note: we can effectively handle table with{' '}\n            <Link\n              target=\"_blank\"\n              className=\"text-primary hover:underline\"\n              href={'https://tanstack.com/table/latest'}\n            >\n              TanStack Table\n            </Link>\n            . This example demonstrates how to use a single event listener for\n            sorting, selecting rows, and performing actions like viewing,\n            editing, and deleting users.\n          </span>\n        </div>\n\n        <div className=\"border rounded-md overflow-hidden mb-3\">\n          <table ref={tableRef} className=\"w-full text-sm\">\n            <thead className=\"bg-muted/50\">\n              <tr>\n                <th className=\"p-2 text-left\">\n                  <div className=\"flex items-center\">\n                    <input\n                      type=\"checkbox\"\n                      checked={\n                        selectedRows.length === users.length && users.length > 0\n                      }\n                      data-action=\"select-all\"\n                      className=\"mr-2\"\n                    />\n                    <span\n                      data-action=\"sort\"\n                      data-field=\"id\"\n                      className=\"cursor-pointer hover:text-primary flex items-center\"\n                    >\n                      ID\n                      {sortField === 'id' && (\n                        <span className=\"ml-1\">\n                          {sortDirection === 'asc' ? '↑' : '↓'}\n                        </span>\n                      )}\n                    </span>\n                  </div>\n                </th>\n                <th className=\"p-2 text-left\">\n                  <span\n                    data-action=\"sort\"\n                    data-field=\"name\"\n                    className=\"cursor-pointer hover:text-primary flex items-center\"\n                  >\n                    Name\n                    {sortField === 'name' && (\n                      <span className=\"ml-1\">\n                        {sortDirection === 'asc' ? '↑' : '↓'}\n                      </span>\n                    )}\n                  </span>\n                </th>\n                <th className=\"p-2 text-left\">\n                  <span\n                    data-action=\"sort\"\n                    data-field=\"email\"\n                    className=\"cursor-pointer hover:text-primary flex items-center\"\n                  >\n                    Email\n                    {sortField === 'email' && (\n                      <span className=\"ml-1\">\n                        {sortDirection === 'asc' ? '↑' : '↓'}\n                      </span>\n                    )}\n                  </span>\n                </th>\n                <th className=\"p-2 text-left\">\n                  <span\n                    data-action=\"sort\"\n                    data-field=\"status\"\n                    className=\"cursor-pointer hover:text-primary flex items-center\"\n                  >\n                    Status\n                    {sortField === 'status' && (\n                      <span className=\"ml-1\">\n                        {sortDirection === 'asc' ? '↑' : '↓'}\n                      </span>\n                    )}\n                  </span>\n                </th>\n                <th className=\"p-2 text-center\">Actions</th>\n              </tr>\n            </thead>\n            <tbody>\n              {sortedUsers.map((user) => (\n                <tr\n                  key={user.id}\n                  data-id={user.id}\n                  className={`border-t ${\n                    selectedRows.includes(user.id)\n                      ? 'bg-primary/10 dark:bg-primary/20'\n                      : 'bg-background dark:bg-card'\n                  }`}\n                >\n                  <td className=\"p-2\">\n                    <div className=\"flex items-center\">\n                      <input\n                        type=\"checkbox\"\n                        checked={selectedRows.includes(user.id)}\n                        data-action=\"select-row\"\n                        data-id={user.id}\n                        className=\"mr-2\"\n                      />\n                      {user.id}\n                    </div>\n                  </td>\n                  <td className=\"p-2\">{user.name}</td>\n                  <td className=\"p-2\">{user.email}</td>\n                  <td className=\"p-2\">\n                    <span\n                      className={`px-2 py-1 rounded-full text-xs ${\n                        user.status === 'Active'\n                          ? 'bg-success/20 text-success dark:bg-success/30 dark:text-success-foreground'\n                          : user.status === 'Inactive'\n                            ? 'bg-muted text-muted-foreground dark:bg-muted/70'\n                            : 'bg-warning/20 text-warning dark:bg-warning/30 dark:text-warning-foreground'\n                      }`}\n                    >\n                      {user.status}\n                    </span>\n                  </td>\n                  <td className=\"p-2 text-center\">\n                    <div className=\"flex justify-center space-x-1\">\n                      <button\n                        data-action=\"view\"\n                        className=\"p-1 text-primary hover:text-primary/80 dark:text-primary dark:hover:text-primary/90\"\n                        title=\"View details\"\n                      >\n                        👁️\n                      </button>\n                      <button\n                        data-action=\"edit\"\n                        className=\"p-1 text-warning hover:text-warning/80 dark:text-warning dark:hover:text-warning/90\"\n                        title=\"Edit user\"\n                      >\n                        ✏️\n                      </button>\n                      <button\n                        data-action=\"delete\"\n                        className=\"p-1 text-destructive hover:text-destructive/80 dark:text-destructive dark:hover:text-destructive/90\"\n                        title=\"Delete user\"\n                      >\n                        🗑️\n                      </button>\n                    </div>\n                  </td>\n                </tr>\n              ))}\n              {users.length === 0 && (\n                <tr>\n                  <td\n                    colSpan={5}\n                    className=\"p-4 text-center text-muted-foreground\"\n                  >\n                    No users found\n                  </td>\n                </tr>\n              )}\n            </tbody>\n          </table>\n        </div>\n\n        {lastAction && (\n          <div className=\"text-center p-2 border rounded-md bg-muted/50 text-sm\">\n            Last action: <span className=\"font-medium\">{lastAction}</span>\n          </div>\n        )}\n      </div>\n\n      <div className=\"text-sm p-2 bg-muted/30 text-muted-foreground rounded border\">\n        <code className=\"font-mono text-xs\">\n          useEventListener('click', handler, tableRef, &#123; selector:\n          '[data-action]' &#125;)\n        </code>\n        <div className=\"mt-2 text-xs space-y-1\">\n          <p>\n            This data table demonstrates the ideal use case for event\n            delegation:\n          </p>\n          <ul className=\"list-disc ml-5 space-y-1\">\n            <li>\n              A single event listener handles 7+ different actions (sort\n              columns, select rows, view/edit/delete)\n            </li>\n            <li>\n              Works efficiently even with many rows without performance\n              degradation\n            </li>\n            <li>Automatically works with dynamically added/removed elements</li>\n            <li>Uses data attributes to simplify event handling logic</li>\n          </ul>\n        </div>\n      </div>\n    </div>\n  )\n}\n",
      "type": "registry:example",
      "target": "components/use-event-listener-example.tsx"
    }
  ]
}
