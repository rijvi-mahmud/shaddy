{
  "$schema": "",
  "name": "use-clipboard-copy-example",
  "type": "registry:example",
  "author": "shaddy (https://shaddy-docs.vercel.app/)",
  "dependencies": [],
  "devDependencies": [],
  "registryDependencies": [],
  "files": [
    {
      "path": "examples/hooks/use-clipboard-copy-example.tsx",
      "content": "'use client'\n\nimport { useState } from 'react'\nimport { useClipboardCopy } from '@/registry/default/hooks/use-clipboard-copy'\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport { Badge } from '@/components/ui/badge'\nimport { Input } from '@/components/ui/input'\nimport { Clipboard, CheckCircle2, RefreshCw, ClipboardX } from 'lucide-react'\nimport { useToast } from '@/hooks/use-toast'\n\nconst UseClipboardCopyExample = () => {\n  const [inputText, setInputText] = useState('Copy this text to clipboard!')\n  const { toast } = useToast()\n  const [copiedText, copy, copyStatus] = useClipboardCopy()\n\n  const handleCopy = async () => {\n    const success = await copy(inputText)\n\n    if (success) {\n      toast({\n        title: 'Text copied!',\n        description:\n          copiedText && copiedText?.length > 50\n            ? `${copiedText?.substring(0, 50)}...`\n            : copiedText,\n        variant: 'default',\n        duration: 1000,\n      })\n    } else {\n      toast({\n        title: 'Copy failed',\n        description: 'Could not copy text to clipboard',\n        variant: 'destructive',\n      })\n    }\n  }\n\n  const handleReset = () => {\n    setInputText('Copy this text to clipboard!')\n  }\n\n  return (\n    <Card className=\"mx-auto border shadow-sm transition-all duration-200\">\n      <CardHeader className=\"pb-2\">\n        <CardTitle className=\"text-center flex flex-col items-center gap-3\">\n          <h6 className=\"text-sm uppercase tracking-wide text-muted-foreground font-medium\">\n            Clipboard Copy Demo\n          </h6>\n          <div>\n            <Badge\n              variant={\n                copyStatus === 'success'\n                  ? 'default'\n                  : copyStatus === 'error'\n                    ? 'destructive'\n                    : 'secondary'\n              }\n              className=\"px-4 py-1 text-sm font-medium\"\n            >\n              {copyStatus === 'success'\n                ? 'Copied!'\n                : copyStatus === 'error'\n                  ? 'Failed!'\n                  : 'Ready'}\n            </Badge>\n          </div>\n        </CardTitle>\n      </CardHeader>\n      <CardContent className=\"pt-6\">\n        <div className=\"space-y-4\">\n          <div className=\"space-y-2\">\n            <label htmlFor=\"text-to-copy\" className=\"text-sm font-medium\">\n              Text to copy:\n            </label>\n            <Input\n              id=\"text-to-copy\"\n              value={inputText}\n              onChange={(e) => setInputText(e.target.value)}\n              placeholder=\"Enter text to copy...\"\n              className=\"w-full\"\n            />\n          </div>\n\n          <div className=\"grid grid-cols-2 gap-3\">\n            <Button\n              variant=\"default\"\n              onClick={handleCopy}\n              className=\"h-9 font-medium transition-colors flex items-center justify-center gap-2\"\n            >\n              {copyStatus === 'success' ? (\n                <CheckCircle2 className=\"h-4 w-4\" />\n              ) : copyStatus === 'error' ? (\n                <ClipboardX className=\"h-4 w-4\" />\n              ) : (\n                <Clipboard className=\"h-4 w-4\" />\n              )}\n              Copy to Clipboard\n            </Button>\n\n            <Button\n              variant=\"ghost\"\n              onClick={handleReset}\n              className=\"h-9 font-medium transition-colors flex items-center justify-center gap-2\"\n            >\n              <RefreshCw className=\"h-4 w-4\" /> Reset\n            </Button>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  )\n}\n\nexport default UseClipboardCopyExample\n",
      "type": "registry:example",
      "target": "components/use-clipboard-copy-example.tsx"
    }
  ]
}
