{
  "$schema": "",
  "name": "text-area-field",
  "type": "registry:component",
  "author": "shaddy (https://shaddy-docs.vercel.app/)",
  "dependencies": [],
  "devDependencies": [],
  "registryDependencies": [
    "http://localhost:3000/r/autosize-textarea",
    "http://localhost:3000/r/shaddy-form",
    "http://localhost:3000/r/loading-spinner"
  ],
  "files": [
    {
      "path": "form/fields/text-area-field.tsx",
      "content": "import { Button } from '@/components/ui/button'\nimport {\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from '@/components/ui/form'\nimport { LoadingSpinner } from '@/registry/default/ui/loading-spinner'\nimport { Textarea as ShadCnTextArea } from '@/components/ui/textarea'\nimport { cn } from '@/lib/utils'\nimport { X } from 'lucide-react'\nimport { FieldValues, Path, useFormContext } from 'react-hook-form'\nimport { AutosizeTextarea } from '@/registry/default/ui/autosize-textarea'\n\ninterface Props<T extends FieldValues> {\n  name: Path<T>\n  label?: string\n  required?: boolean\n  placeholder?: string\n  resizable?: boolean\n  autoResize?: boolean\n  maxHeight?: number\n  minHeight?: number\n  action?: () => void\n  Icon?: React.ReactNode\n  loading?: boolean\n  className?: string\n  inputClassName?: string\n  iconClassName?: string\n}\n/**\n * TextareaField component\n *\n * @param {Path<T>} name - The name of the field\n * @param {string} label - The label of the field\n * @param {boolean} required - Whether the field is required\n * @param {string} placeholder - The placeholder of the field\n * @param {boolean} resizable - Whether the field is resizable\n * @param {boolean} autoResize - Whether the field should auto-grow based on content\n * @param {Function} action - The action to be performed on the field\n * @param {ReactNode} icon - The icon to be displayed\n * @param {boolean} loading - Whether the field is loading\n * @param {string} className - The class name of the field\n * @param {string} inputClassName - The class name of the input\n * @param {string} iconClassName - The class name of the icon\n *\n * @returns {ReactElement} - The textarea field component\n *\n * @example\n * ```tsx\n * <TextareaField control={control} name=\"summary\" label=\"Summary\" autoGrow />\n * ```\n */\nexport const TextAreaField = <T extends FieldValues>({\n  name,\n  label,\n  placeholder,\n  required = false,\n  resizable = false,\n  autoResize = false,\n  maxHeight,\n  minHeight,\n  action,\n  Icon,\n  loading,\n  className,\n  inputClassName,\n  iconClassName,\n}: Props<T>) => {\n  const { control } = useFormContext<T>()\n  const TextArea = autoResize ? AutosizeTextarea : ShadCnTextArea\n  return (\n    <FormField\n      name={name}\n      control={control}\n      render={({ field }) => (\n        <FormItem className={cn(className)}>\n          {label && (\n            <FormLabel>\n              <span>{label}</span>\n              {required && <span className=\"ml-1 text-red-500\">*</span>}\n            </FormLabel>\n          )}\n          <FormControl>\n            <div className=\"relative flex items-center gap-2\">\n              <TextArea\n                {...field}\n                placeholder={placeholder ?? 'Enter a value'}\n                className={cn(\n                  'w-full',\n                  action && 'pr-12',\n                  resizable === false && 'resize-none',\n                  inputClassName\n                )}\n                maxHeight={maxHeight}\n                minHeight={minHeight}\n              />\n              {loading && <LoadingSpinner className=\"absolute right-4\" />}\n              {action && (\n                <Button\n                  variant={'ghost'}\n                  size={'sm'}\n                  onClick={action}\n                  type=\"button\"\n                  className={cn(iconClassName, 'absolute right-0.5 top-0.5')}\n                >\n                  {Icon ? Icon : <X className=\"h-4 w-4 text-red-500\" />}\n                </Button>\n              )}\n\n              {!action && Icon && (\n                <div className={cn(iconClassName, 'absolute right-2 top-3')}>\n                  {Icon}\n                </div>\n              )}\n            </div>\n          </FormControl>\n          <FormMessage />\n        </FormItem>\n      )}\n    />\n  )\n}\n\nTextAreaField.displayName = 'TextAreaField'\n",
      "type": "registry:component",
      "target": "components/form/fields/text-area-field.tsx"
    }
  ]
}
