{
  "$schema": "",
  "name": "use-local-storage-settings-example",
  "type": "registry:example",
  "author": "shaddy (https://shaddy-docs.vercel.app/)",
  "dependencies": [],
  "devDependencies": [],
  "registryDependencies": [],
  "files": [
    {
      "path": "examples/hooks/use-local-storage-settings-example.tsx",
      "content": "'use client'\n\nimport { Badge } from '@/components/ui/badge'\nimport { Button } from '@/components/ui/button'\nimport { Input } from '@/components/ui/input'\nimport { Label } from '@/components/ui/label'\nimport { Switch } from '@/components/ui/switch'\nimport { useLocalStorage } from '@/registry/default/hooks/use-local-storage'\nimport { Database, Settings, Trash2 } from 'lucide-react'\n\n// Example 2: User settings with complex object\nconst SettingsExample = () => {\n  const [settings, setSettings, removeSettings] = useLocalStorage(\n    'user-settings',\n    {\n      theme: 'light',\n      notifications: true,\n      language: 'en',\n      autoSave: false,\n      fontSize: 14,\n    }\n  )\n\n  const updateSetting = (key: string, value: any) => {\n    setSettings((prev) => ({ ...prev, [key]: value }))\n  }\n\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"bg-muted/30 rounded-md p-4 shadow-sm\">\n        <div className=\"flex items-center gap-2 mb-4\">\n          <Settings className=\"h-5 w-5\" />\n          <h3 className=\"text-lg font-semibold\">User Preferences</h3>\n          <Badge variant=\"secondary\" className=\"ml-auto\">\n            <Database className=\"h-3 w-3 mr-1\" />\n            Saved Locally\n          </Badge>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <div className=\"space-y-2\">\n            <Label>Theme</Label>\n            <div className=\"flex gap-2\">\n              {['light', 'dark', 'auto'].map((theme) => (\n                <Button\n                  key={theme}\n                  onClick={() => updateSetting('theme', theme)}\n                  variant={settings.theme === theme ? 'default' : 'outline'}\n                  size=\"sm\"\n                  className=\"capitalize\"\n                >\n                  {theme}\n                </Button>\n              ))}\n            </div>\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label>Language</Label>\n            <div className=\"flex gap-2\">\n              {[\n                { code: 'en', name: 'English' },\n                { code: 'es', name: 'Spanish' },\n                { code: 'fr', name: 'French' },\n              ].map((lang) => (\n                <Button\n                  key={lang.code}\n                  onClick={() => updateSetting('language', lang.code)}\n                  variant={\n                    settings.language === lang.code ? 'default' : 'outline'\n                  }\n                  size=\"sm\"\n                >\n                  {lang.name}\n                </Button>\n              ))}\n            </div>\n          </div>\n\n          <div className=\"flex items-center justify-between space-x-2\">\n            <Label htmlFor=\"notifications\">Push Notifications</Label>\n            <Switch\n              id=\"notifications\"\n              checked={settings.notifications}\n              onCheckedChange={(checked) =>\n                updateSetting('notifications', checked)\n              }\n            />\n          </div>\n\n          <div className=\"flex items-center justify-between space-x-2\">\n            <Label htmlFor=\"autoSave\">Auto Save</Label>\n            <Switch\n              id=\"autoSave\"\n              checked={settings.autoSave}\n              onCheckedChange={(checked) => updateSetting('autoSave', checked)}\n            />\n          </div>\n\n          <div className=\"space-y-2 md:col-span-2\">\n            <Label htmlFor=\"fontSize\">Font Size: {settings.fontSize}px</Label>\n            <Input\n              id=\"fontSize\"\n              type=\"range\"\n              min=\"12\"\n              max=\"20\"\n              value={settings.fontSize}\n              onChange={(e) =>\n                updateSetting('fontSize', parseInt(e.target.value))\n              }\n              className=\"w-full\"\n            />\n          </div>\n        </div>\n\n        <div className=\"mt-4 p-3 bg-muted/50 rounded border\">\n          <div className=\"text-sm font-medium mb-2\">Current Settings:</div>\n          <pre className=\"text-xs bg-background p-2 rounded border overflow-auto\">\n            {JSON.stringify(settings, null, 2)}\n          </pre>\n        </div>\n\n        <div className=\"flex gap-2 mt-4\">\n          <Button onClick={removeSettings} variant=\"destructive\" size=\"sm\">\n            <Trash2 className=\"h-4 w-4 mr-1\" />\n            Reset All\n          </Button>\n        </div>\n      </div>\n\n      <div className=\"text-sm p-2 bg-muted/30 text-muted-foreground rounded border\">\n        <code className=\"font-mono text-xs\">\n          useLocalStorage('user-settings', defaultObject)\n        </code>\n        <div className=\"mt-1 text-xs\">\n          Complex objects are automatically serialized/deserialized\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default SettingsExample\n",
      "type": "registry:example",
      "target": "components/use-local-storage-settings-example.tsx"
    }
  ]
}
