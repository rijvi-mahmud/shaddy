{
  "$schema": "",
  "name": "date-range-picker",
  "type": "registry:ui",
  "author": "shaddy (https://shaddy-docs.vercel.app/)",
  "dependencies": [
    "lucide-react",
    "@radix-ui/react-icons",
    "date-fns",
    "react-day-picker"
  ],
  "devDependencies": [],
  "registryDependencies": ["button", "calendar", "popover"],
  "files": [
    {
      "path": "ui/date-range-picker.tsx",
      "content": "import { CalendarIcon } from '@radix-ui/react-icons'\nimport {\n  addDays,\n  endOfMonth,\n  endOfWeek,\n  endOfYear,\n  format,\n  startOfMonth,\n  startOfWeek,\n  startOfYear,\n  subDays,\n} from 'date-fns'\nimport * as React from 'react'\nimport type { DateRange } from 'react-day-picker'\n\nimport { Button, type ButtonProps } from '@/components/ui/button'\nimport { Calendar } from '@/components/ui/calendar'\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from '@/components/ui/popover'\nimport { cn } from '@/lib/utils'\nimport { XIcon } from 'lucide-react'\n\n// Predefined ranges\nconst today = new Date()\nconst PRESET_RANGES = [\n  { label: 'Today', value: [today, today] },\n  { label: 'Yesterday', value: [subDays(today, 1), subDays(today, 1)] },\n  {\n    label: 'This Week',\n    value: [\n      startOfWeek(today, { weekStartsOn: 1 }),\n      endOfWeek(today, { weekStartsOn: 1 }),\n    ],\n  },\n  {\n    label: 'Last Week',\n    value: [\n      subDays(startOfWeek(today, { weekStartsOn: 1 }), 7),\n      subDays(endOfWeek(today, { weekStartsOn: 1 }), 7),\n    ],\n  },\n  { label: 'Last 7 Days', value: [subDays(today, 6), today] },\n  {\n    label: 'This Month',\n    value: [startOfMonth(today), endOfMonth(today)],\n  },\n  {\n    label: 'Last Month',\n    value: [\n      startOfMonth(subDays(today, today.getDate())),\n      endOfMonth(subDays(today, today.getDate())),\n    ],\n  },\n  { label: 'This Year', value: [startOfYear(today), endOfYear(today)] },\n  {\n    label: 'Last Year',\n    value: [startOfYear(subDays(today, 365)), endOfYear(subDays(today, 365))],\n  },\n]\n\n// Interface for the props\ninterface DateRangePickerProps\n  extends Omit<\n    React.ComponentPropsWithoutRef<typeof PopoverContent>,\n    'onChange'\n  > {\n  /**\n   * The selected date range.\n   * @default undefined\n   * @type DateRange\n   * @example { from: new Date(), to: new Date() }\n   */\n  dateRange?: DateRange\n\n  /**\n   * The number of days to display in the date range picker.\n   * @default undefined\n   * @type number\n   * @example 7\n   */\n  dayCount?: number\n\n  /**\n   * The placeholder text of the calendar trigger button.\n   * @default \"Pick a date\"\n   * @type string | undefined\n   */\n  placeholder?: string\n\n  /**\n   * The variant of the calendar trigger button.\n   * @default \"outline\"\n   * @type \"default\" | \"outline\" | \"secondary\" | \"ghost\"\n   */\n  triggerVariant?: Exclude<ButtonProps['variant'], 'destructive' | 'link'>\n\n  /**\n   * The size of the calendar trigger button.\n   * @default \"default\"\n   * @type \"default\" | \"sm\" | \"lg\"\n   */\n  triggerSize?: Exclude<ButtonProps['size'], 'icon'>\n\n  /**\n   * The class name of the calendar trigger button.\n   * @default undefined\n   * @type string\n   */\n  triggerClassName?: string\n\n  /**\n   * Callback when a date range is selected.\n   * @default undefined\n   * @type (date: { from: Date; to?: Date }) => void\n   */\n  onChange?: (date: { from?: Date; to?: Date }) => void\n\n  /**\n   * Whether to show internal date range presets.\n   * @default true\n   * @type boolean\n   */\n  showInternalPresets?: boolean\n}\n\nfunction DateRangePicker({\n  dateRange,\n  dayCount,\n  placeholder = 'Pick a date',\n  triggerVariant = 'outline',\n  triggerSize = 'default',\n  triggerClassName,\n  onChange,\n  className,\n  showInternalPresets = true,\n  ...props\n}: DateRangePickerProps) {\n  const [date, setDate] = React.useState<DateRange | undefined>(() => {\n    let fromDay: Date | undefined\n    let toDay: Date | undefined\n\n    if (dateRange) {\n      fromDay = dateRange.from\n      toDay = dateRange.to\n    } else if (dayCount) {\n      toDay = new Date()\n      fromDay = addDays(toDay, -dayCount)\n    }\n\n    return { from: fromDay, to: toDay }\n  })\n\n  // Control Popover open/close state\n  const [open, setOpen] = React.useState(false)\n\n  // Handle preset range click\n  const handlePresetClick = (preset: { label: string; value: Date[] }) => {\n    setDate({ from: preset.value[0], to: preset.value[1] })\n    setOpen(false) // Close popover after preset selection\n  }\n\n  // Handle OK button click\n  const handleOkClick = () => {\n    if (date?.from && date?.to && onChange) {\n      onChange({ from: date.from, to: date.to })\n    }\n    setOpen(false) // Close popover after selecting date range\n  }\n\n  // Handle clear date\n  const handleClearDate = (e: React.MouseEvent) => {\n    e.stopPropagation()\n    onChange?.({ from: undefined, to: undefined })\n    setDate(undefined) // Clear the selected date\n    setOpen(true) // Ensure popover stays open to select new date\n  }\n\n  return (\n    <div className=\"grid gap-2\">\n      <Popover open={open} onOpenChange={setOpen}>\n        <PopoverTrigger asChild>\n          <Button\n            variant={triggerVariant}\n            size={triggerSize}\n            className={cn(\n              'w-full justify-start truncate text-left font-normal relative',\n              !date && 'text-muted-foreground',\n              triggerClassName\n            )}\n          >\n            <CalendarIcon className=\"mr-2 size-4\" />\n            {date?.from ? (\n              date.to ? (\n                <>\n                  {format(date.from, 'LLL dd, y')} -{' '}\n                  {format(date.to, 'LLL dd, y')}\n                  <div\n                    className=\"absolute right-2 top-1/2 -translate-y-1/2 flex items-center justify-center rounded-sm opacity-70 hover:opacity-100 focus:outline-none focus:ring-0\"\n                    onClick={handleClearDate}\n                  >\n                    <XIcon className=\"h-4 w-4 text-muted-foreground\" />\n                    <span className=\"sr-only\">Clear date</span>\n                  </div>\n                </>\n              ) : (\n                format(date.from, 'LLL dd, y')\n              )\n            ) : (\n              <span>{placeholder}</span>\n            )}\n          </Button>\n        </PopoverTrigger>\n        <PopoverContent className={cn('w-auto p-0', className)} {...props}>\n          {showInternalPresets ? (\n            <>\n              <div className=\"flex\">\n                <div className=\"p-2\">\n                  <ul className=\"space-y-1\">\n                    {PRESET_RANGES.map((preset) => (\n                      <li\n                        key={preset.label}\n                        role=\"button\"\n                        className=\"cursor-pointer rounded-md px-2 py-1 text-sm text-muted-foreground hover:bg-accent hover:text-accent-foreground\"\n                        onClick={() => handlePresetClick(preset)}\n                      >\n                        {preset.label}\n                      </li>\n                    ))}\n                  </ul>\n                </div>\n                <Calendar\n                  mode=\"range\"\n                  defaultMonth={date?.from}\n                  selected={date}\n                  onSelect={setDate}\n                  numberOfMonths={2}\n                  captionLayout=\"dropdown\"\n                />\n              </div>\n            </>\n          ) : (\n            <Calendar\n              mode=\"range\"\n              defaultMonth={date?.from}\n              selected={date}\n              onSelect={setDate}\n              numberOfMonths={2}\n              captionLayout=\"dropdown\"\n            />\n          )}\n\n          {/* OK Button: Disabled if no date range is selected */}\n          <div className=\"flex justify-end p-2\">\n            <Button\n              size=\"sm\"\n              onClick={handleOkClick}\n              className=\"mt-2 w-[100px]\"\n              disabled={!date?.from || !date?.to}\n            >\n              OK\n            </Button>\n          </div>\n        </PopoverContent>\n      </Popover>\n    </div>\n  )\n}\n\nexport default DateRangePicker\n",
      "type": "registry:ui",
      "target": "components/ui/date-range-picker.tsx"
    }
  ]
}
